
EE5_STMF3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08003564  08003564  00013564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800368c  0800368c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800368c  0800368c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800368c  0800368c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800368c  0800368c  0001368c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003690  08003690  00013690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  080036a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080036a0  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad4c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000170c  00000000  00000000  0002ad88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007a8  00000000  00000000  0002c498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000720  00000000  00000000  0002cc40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f05d  00000000  00000000  0002d360  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007131  00000000  00000000  0004c3bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b9309  00000000  00000000  000534ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010c7f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e90  00000000  00000000  0010c874  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800354c 	.word	0x0800354c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800354c 	.word	0x0800354c

080001c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001c8:	b5b0      	push	{r4, r5, r7, lr}
 80001ca:	b0be      	sub	sp, #248	; 0xf8
 80001cc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001ce:	f000 fd19 	bl	8000c04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001d2:	f000 fa3d 	bl	8000650 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001d6:	f000 fafb 	bl	80007d0 <MX_GPIO_Init>
	MX_CAN_Init();
 80001da:	f000 fa93 	bl	8000704 <MX_CAN_Init>
	MX_USART1_UART_Init();
 80001de:	f000 fac7 	bl	8000770 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	sFilterConfig.FilterActivation = ENABLE;
 80001e2:	4b57      	ldr	r3, [pc, #348]	; (8000340 <main+0x178>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001e8:	4b55      	ldr	r3, [pc, #340]	; (8000340 <main+0x178>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = 0x0; //line up the higher ID for a compare (11 bits and 16 bits give 5 bit shift)
 80001ee:	4b54      	ldr	r3, [pc, #336]	; (8000340 <main+0x178>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
//  sFilterConfig.FilterIdHigh = (car_telemetryID<<5|DASHBOARD)<<5;	//line up the higher ID for a compare (11 bits and 16 bits give 5 bit shift)
	sFilterConfig.FilterIdLow = 0x0;
 80001f4:	4b52      	ldr	r3, [pc, #328]	; (8000340 <main+0x178>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	605a      	str	r2, [r3, #4]
//	sFilterConfig.FilterMaskIdHigh = 0xFFFF<<5;	//0000001111100000
	sFilterConfig.FilterMaskIdHigh = 0x0000;	//0000001111100000
 80001fa:	4b51      	ldr	r3, [pc, #324]	; (8000340 <main+0x178>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x00;
 8000200:	4b4f      	ldr	r3, [pc, #316]	; (8000340 <main+0x178>)
 8000202:	2200      	movs	r2, #0
 8000204:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000206:	4b4e      	ldr	r3, [pc, #312]	; (8000340 <main+0x178>)
 8000208:	2200      	movs	r2, #0
 800020a:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800020c:	4b4c      	ldr	r3, [pc, #304]	; (8000340 <main+0x178>)
 800020e:	2201      	movs	r2, #1
 8000210:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterBank = 0;
 8000212:	4b4b      	ldr	r3, [pc, #300]	; (8000340 <main+0x178>)
 8000214:	2200      	movs	r2, #0
 8000216:	615a      	str	r2, [r3, #20]

	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000218:	4949      	ldr	r1, [pc, #292]	; (8000340 <main+0x178>)
 800021a:	484a      	ldr	r0, [pc, #296]	; (8000344 <main+0x17c>)
 800021c:	f000 fe53 	bl	8000ec6 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan);
 8000220:	4848      	ldr	r0, [pc, #288]	; (8000344 <main+0x17c>)
 8000222:	f000 ff1a 	bl	800105a <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //last argument is mask of activated ITs just OR| them together
 8000226:	2102      	movs	r1, #2
 8000228:	4846      	ldr	r0, [pc, #280]	; (8000344 <main+0x17c>)
 800022a:	f001 f86c 	bl	8001306 <HAL_CAN_ActivateNotification>

	// UART DASHBOARD TEMPLATES:
	uint8_t speed[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x00, 0x01, 0x00, 0x00 };
 800022e:	4a46      	ldr	r2, [pc, #280]	; (8000348 <main+0x180>)
 8000230:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000234:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000238:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t throttle[20] = { 0x5A, 0xA5, 0x17, 0x82, 0x00, 0x10, 0x00, 0x04,
 800023c:	4b43      	ldr	r3, [pc, #268]	; (800034c <main+0x184>)
 800023e:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 8000242:	461d      	mov	r5, r3
 8000244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000248:	682b      	ldr	r3, [r5, #0]
 800024a:	6023      	str	r3, [r4, #0]
			0x00, 0x01, 0x00, 0x4C, 0x00, 0x1E, 0x00, 0x6F, 0x00, 0xAA, 0x00,
			0x00 };
	uint8_t brake[20] = { 0x5A, 0xA5, 0x17, 0x82, 0x00, 0x11, 0x00, 0x04, 0x00,
 800024c:	4b40      	ldr	r3, [pc, #256]	; (8000350 <main+0x188>)
 800024e:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000252:	461d      	mov	r5, r3
 8000254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000258:	682b      	ldr	r3, [r5, #0]
 800025a:	6023      	str	r3, [r4, #0]
			0x01, 0x00, 0x4C, 0x00, 0x1E, 0x00, 0x71, 0x00, 0xAE, 0x00, 0x00 };
	uint8_t gear[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x00, 0x03, 0x00, 0x00 };
 800025c:	4a3d      	ldr	r2, [pc, #244]	; (8000354 <main+0x18c>)
 800025e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000262:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000266:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t currentLapTime[8] =
 800026a:	4a3b      	ldr	r2, [pc, #236]	; (8000358 <main+0x190>)
 800026c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000270:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000274:	e883 0003 	stmia.w	r3, {r0, r1}
			{ 0x5A, 0xA5, 0x17, 0x82, 0x00, 0x02, 0x00, 0x00 };
	uint8_t carPosition[8] = { 0x5A, 0xA5, 0x17, 0x82, 0x00, 0x06, 0x00, 0x00 };
 8000278:	4a38      	ldr	r2, [pc, #224]	; (800035c <main+0x194>)
 800027a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800027e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000282:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t currentLapNum[8] =
 8000286:	4a35      	ldr	r2, [pc, #212]	; (800035c <main+0x194>)
 8000288:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800028c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000290:	e883 0003 	stmia.w	r3, {r0, r1}
			{ 0x5A, 0xA5, 0x17, 0x82, 0x00, 0x06, 0x00, 0x00 };
	uint8_t totalLaps[8] = { 0x5A, 0xA5, 0x17, 0x82, 0x00, 0x05, 0x00, 0x00 };
 8000294:	4a32      	ldr	r2, [pc, #200]	; (8000360 <main+0x198>)
 8000296:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800029a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800029e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t frontLeftWingDamage[20] = { 0x5A, 0xA5, 0x17, 0x82, 0x00, 0x13,
 80002a2:	4b30      	ldr	r3, [pc, #192]	; (8000364 <main+0x19c>)
 80002a4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80002a8:	461d      	mov	r5, r3
 80002aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ae:	682b      	ldr	r3, [r5, #0]
 80002b0:	6023      	str	r3, [r4, #0]
			0x00, 0x04, 0x00, 0x01, 0x00, 0x88, 0x00, 0xE7, 0x00, 0x9D, 0x01,
			0x04, 0xF0, 0x00 };
	uint8_t frontRightWingDamage[20] = { 0x5A, 0xA5, 0x17, 0x82, 0x00, 0x12,
 80002b2:	4b2d      	ldr	r3, [pc, #180]	; (8000368 <main+0x1a0>)
 80002b4:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80002b8:	461d      	mov	r5, r3
 80002ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002be:	682b      	ldr	r3, [r5, #0]
 80002c0:	6023      	str	r3, [r4, #0]
			0x00, 0x04, 0x00, 0x01, 0x00, 0x88, 0x00, 0xB6, 0x00, 0x9D, 0x00,
			0xD3, 0xF0, 0x00 };
	uint8_t rearWingDamage[20] = { 0x5A, 0xA5, 0x17, 0x82, 0x00, 0x14, 0x00,
 80002c2:	4b2a      	ldr	r3, [pc, #168]	; (800036c <main+0x1a4>)
 80002c4:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80002c8:	461d      	mov	r5, r3
 80002ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ce:	682b      	ldr	r3, [r5, #0]
 80002d0:	6023      	str	r3, [r4, #0]
			0x04, 0x00, 0x01, 0x00, 0x88, 0x00, 0xE7, 0x00, 0x9D, 0x01, 0x04,
			0xF0, 0x00 };
	uint8_t engineDamage[20] = { 0x5A, 0xA5, 0x17, 0x82, 0x00, 0x15, 0x00, 0x04,
 80002d2:	4b27      	ldr	r3, [pc, #156]	; (8000370 <main+0x1a8>)
 80002d4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80002d8:	461d      	mov	r5, r3
 80002da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002de:	682b      	ldr	r3, [r5, #0]
 80002e0:	6023      	str	r3, [r4, #0]
			0x00, 0x01, 0x00, 0xEE, 0x00, 0xC9, 0x01, 0x2A, 0x00, 0xF0, 0xF0,
			0x00 };
	uint8_t FRTyre[20] = { 0x5A, 0xA5, 0x17, 0x82, 0x00, 0x16, 0x00, 0x04, 0x00,
 80002e2:	4b24      	ldr	r3, [pc, #144]	; (8000374 <main+0x1ac>)
 80002e4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80002e8:	461d      	mov	r5, r3
 80002ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ee:	682b      	ldr	r3, [r5, #0]
 80002f0:	6023      	str	r3, [r4, #0]
			0x01, 0x00, 0xA9, 0x00, 0xAE, 0x00, 0xC9, 0x00, 0xC4, 0xF0, 0x00 };
	uint8_t FLTyre[20] = { 0x5A, 0xA5, 0x17, 0x82, 0x00, 0x17, 0x00, 0x04, 0x00,
 80002f2:	4b21      	ldr	r3, [pc, #132]	; (8000378 <main+0x1b0>)
 80002f4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80002f8:	461d      	mov	r5, r3
 80002fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002fe:	682b      	ldr	r3, [r5, #0]
 8000300:	6023      	str	r3, [r4, #0]
			0x01, 0x00, 0xAA, 0x00, 0xF8, 0x00, 0xC9, 0x01, 0x0C, 0xF0, 0x00 };
	uint8_t BRTyre[20] = { 0x5A, 0xA5, 0x17, 0x82, 0x00, 0x18, 0x00, 0x04, 0x00,
 8000302:	4b1e      	ldr	r3, [pc, #120]	; (800037c <main+0x1b4>)
 8000304:	f107 0414 	add.w	r4, r7, #20
 8000308:	461d      	mov	r5, r3
 800030a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030e:	682b      	ldr	r3, [r5, #0]
 8000310:	6023      	str	r3, [r4, #0]
			0x01, 0x01, 0x46, 0x00, 0xAE, 0x01, 0x65, 0x00, 0xC4, 0xF0, 0x00 };
	uint8_t BLTyre[20] = { 0x5A, 0xA5, 0x17, 0x82, 0x00, 0x19, 0x00, 0x04, 0x00,
 8000312:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <main+0x1b8>)
 8000314:	463c      	mov	r4, r7
 8000316:	461d      	mov	r5, r3
 8000318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800031a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800031c:	682b      	ldr	r3, [r5, #0]
 800031e:	6023      	str	r3, [r4, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		switch (my_ID) {
 8000320:	4b18      	ldr	r3, [pc, #96]	; (8000384 <main+0x1bc>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b02      	cmp	r3, #2
 8000326:	f000 8180 	beq.w	800062a <main+0x462>
 800032a:	2b02      	cmp	r3, #2
 800032c:	dc03      	bgt.n	8000336 <main+0x16e>
 800032e:	2b00      	cmp	r3, #0
 8000330:	d02a      	beq.n	8000388 <main+0x1c0>
 8000332:	2b01      	cmp	r3, #1
		case COLOR_FLAGS:
			break;
		case BROADCAST:
			break;
		case LEDS:
			break;
 8000334:	e17c      	b.n	8000630 <main+0x468>
		switch (my_ID) {
 8000336:	2b03      	cmp	r3, #3
 8000338:	f000 8179 	beq.w	800062e <main+0x466>
 800033c:	2bff      	cmp	r3, #255	; 0xff
			break;
 800033e:	e177      	b.n	8000630 <main+0x468>
 8000340:	2000002c 	.word	0x2000002c
 8000344:	20000070 	.word	0x20000070
 8000348:	08003564 	.word	0x08003564
 800034c:	0800356c 	.word	0x0800356c
 8000350:	08003580 	.word	0x08003580
 8000354:	08003594 	.word	0x08003594
 8000358:	0800359c 	.word	0x0800359c
 800035c:	080035a4 	.word	0x080035a4
 8000360:	080035ac 	.word	0x080035ac
 8000364:	080035b4 	.word	0x080035b4
 8000368:	080035c8 	.word	0x080035c8
 800036c:	080035dc 	.word	0x080035dc
 8000370:	080035f0 	.word	0x080035f0
 8000374:	08003604 	.word	0x08003604
 8000378:	08003618 	.word	0x08003618
 800037c:	0800362c 	.word	0x0800362c
 8000380:	08003640 	.word	0x08003640
 8000384:	20000028 	.word	0x20000028
			speed[6] = ((uint16_t) my_car_telemetry_packet.m_speed * 180 / 400)
 8000388:	4baa      	ldr	r3, [pc, #680]	; (8000634 <main+0x46c>)
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	b29b      	uxth	r3, r3
 800038e:	461a      	mov	r2, r3
 8000390:	23b4      	movs	r3, #180	; 0xb4
 8000392:	fb03 f302 	mul.w	r3, r3, r2
 8000396:	4aa8      	ldr	r2, [pc, #672]	; (8000638 <main+0x470>)
 8000398:	fb82 1203 	smull	r1, r2, r2, r3
 800039c:	11d2      	asrs	r2, r2, #7
 800039e:	17db      	asrs	r3, r3, #31
 80003a0:	1ad3      	subs	r3, r2, r3
					>> 8; //highest byte of a degree rotation where 400 kmh is 180 degrees
 80003a2:	121b      	asrs	r3, r3, #8
			speed[6] = ((uint16_t) my_car_telemetry_packet.m_speed * 180 / 400)
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
			speed[7] = ((uint16_t) my_car_telemetry_packet.m_speed * 180 / 400)
 80003aa:	4ba2      	ldr	r3, [pc, #648]	; (8000634 <main+0x46c>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	461a      	mov	r2, r3
 80003b2:	23b4      	movs	r3, #180	; 0xb4
 80003b4:	fb03 f302 	mul.w	r3, r3, r2
 80003b8:	4a9f      	ldr	r2, [pc, #636]	; (8000638 <main+0x470>)
 80003ba:	fb82 1203 	smull	r1, r2, r2, r3
 80003be:	11d2      	asrs	r2, r2, #7
 80003c0:	17db      	asrs	r3, r3, #31
 80003c2:	1ad3      	subs	r3, r2, r3
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
			HAL_UART_Transmit(&huart1, speed, sizeof(speed), 1000);
 80003ca:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80003ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003d2:	2208      	movs	r2, #8
 80003d4:	4899      	ldr	r0, [pc, #612]	; (800063c <main+0x474>)
 80003d6:	f002 fd59 	bl	8002e8c <HAL_UART_Transmit>
			throttle[17] = 30 + (my_car_telemetry_packet.throttle * 140 / 100);
 80003da:	4b96      	ldr	r3, [pc, #600]	; (8000634 <main+0x46c>)
 80003dc:	78db      	ldrb	r3, [r3, #3]
 80003de:	461a      	mov	r2, r3
 80003e0:	238c      	movs	r3, #140	; 0x8c
 80003e2:	fb03 f302 	mul.w	r3, r3, r2
 80003e6:	4a94      	ldr	r2, [pc, #592]	; (8000638 <main+0x470>)
 80003e8:	fb82 1203 	smull	r1, r2, r2, r3
 80003ec:	1152      	asrs	r2, r2, #5
 80003ee:	17db      	asrs	r3, r3, #31
 80003f0:	1ad3      	subs	r3, r2, r3
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	331e      	adds	r3, #30
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
			HAL_UART_Transmit(&huart1, throttle, sizeof(throttle), 1000);
 80003fc:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8000400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000404:	2214      	movs	r2, #20
 8000406:	488d      	ldr	r0, [pc, #564]	; (800063c <main+0x474>)
 8000408:	f002 fd40 	bl	8002e8c <HAL_UART_Transmit>
			brake[17] = 30 + (my_car_telemetry_packet.brake * 140 / 100);
 800040c:	4b89      	ldr	r3, [pc, #548]	; (8000634 <main+0x46c>)
 800040e:	789b      	ldrb	r3, [r3, #2]
 8000410:	461a      	mov	r2, r3
 8000412:	238c      	movs	r3, #140	; 0x8c
 8000414:	fb03 f302 	mul.w	r3, r3, r2
 8000418:	4a87      	ldr	r2, [pc, #540]	; (8000638 <main+0x470>)
 800041a:	fb82 1203 	smull	r1, r2, r2, r3
 800041e:	1152      	asrs	r2, r2, #5
 8000420:	17db      	asrs	r3, r3, #31
 8000422:	1ad3      	subs	r3, r2, r3
 8000424:	b2db      	uxtb	r3, r3
 8000426:	331e      	adds	r3, #30
 8000428:	b2db      	uxtb	r3, r3
 800042a:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
			HAL_UART_Transmit(&huart1, brake, sizeof(brake), 1000);
 800042e:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000436:	2214      	movs	r2, #20
 8000438:	4880      	ldr	r0, [pc, #512]	; (800063c <main+0x474>)
 800043a:	f002 fd27 	bl	8002e8c <HAL_UART_Transmit>
			gear[6] = ((uint16_t) my_car_telemetry_packet.gear) >> 8;
 800043e:	4b7d      	ldr	r3, [pc, #500]	; (8000634 <main+0x46c>)
 8000440:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000444:	b29b      	uxth	r3, r3
 8000446:	0a1b      	lsrs	r3, r3, #8
 8000448:	b29b      	uxth	r3, r3
 800044a:	b2db      	uxtb	r3, r3
 800044c:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
			gear[7] = ((uint16_t) my_car_telemetry_packet.gear) & 0xFF;
 8000450:	4b78      	ldr	r3, [pc, #480]	; (8000634 <main+0x46c>)
 8000452:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000456:	b2db      	uxtb	r3, r3
 8000458:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			HAL_UART_Transmit(&huart1, gear, sizeof(gear), 1000);
 800045c:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8000460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000464:	2208      	movs	r2, #8
 8000466:	4875      	ldr	r0, [pc, #468]	; (800063c <main+0x474>)
 8000468:	f002 fd10 	bl	8002e8c <HAL_UART_Transmit>
			currentLapTime[6] = ((uint16_t)(my_lap_data_packet.m_currentLapTime
 800046c:	4b74      	ldr	r3, [pc, #464]	; (8000640 <main+0x478>)
 800046e:	681b      	ldr	r3, [r3, #0]
					* 100) )>> 8;
 8000470:	eddf 7a74 	vldr	s15, [pc, #464]	; 8000644 <main+0x47c>
 8000474:	ee07 3a10 	vmov	s14, r3
 8000478:	ee67 7a27 	vmul.f32	s15, s14, s15
			currentLapTime[6] = ((uint16_t)(my_lap_data_packet.m_currentLapTime
 800047c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000480:	ee17 3a90 	vmov	r3, s15
 8000484:	b29b      	uxth	r3, r3
 8000486:	0a1b      	lsrs	r3, r3, #8
 8000488:	b29b      	uxth	r3, r3
 800048a:	b2db      	uxtb	r3, r3
 800048c:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
			currentLapTime[7] = ((uint16_t) (my_lap_data_packet.m_currentLapTime
 8000490:	4b6b      	ldr	r3, [pc, #428]	; (8000640 <main+0x478>)
 8000492:	681b      	ldr	r3, [r3, #0]
					* 100)) & 0xFF;
 8000494:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8000644 <main+0x47c>
 8000498:	ee07 3a10 	vmov	s14, r3
 800049c:	ee67 7a27 	vmul.f32	s15, s14, s15
			currentLapTime[7] = ((uint16_t) (my_lap_data_packet.m_currentLapTime
 80004a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004a4:	ee17 3a90 	vmov	r3, s15
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
			HAL_UART_Transmit(&huart1, currentLapTime, sizeof(currentLapTime),
 80004b0:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80004b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004b8:	2208      	movs	r2, #8
 80004ba:	4860      	ldr	r0, [pc, #384]	; (800063c <main+0x474>)
 80004bc:	f002 fce6 	bl	8002e8c <HAL_UART_Transmit>
			carPosition[6] = (uint16_t) (my_lap_data_packet.m_carPosition) >> 8;
 80004c0:	4b5f      	ldr	r3, [pc, #380]	; (8000640 <main+0x478>)
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	121b      	asrs	r3, r3, #8
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
			carPosition[7] = (uint16_t) (my_lap_data_packet.m_carPosition) & 0xFF;
 80004cc:	4b5c      	ldr	r3, [pc, #368]	; (8000640 <main+0x478>)
 80004ce:	791b      	ldrb	r3, [r3, #4]
 80004d0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			HAL_UART_Transmit(&huart1, carPosition, sizeof(carPosition), 1000);
 80004d4:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80004d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004dc:	2208      	movs	r2, #8
 80004de:	4857      	ldr	r0, [pc, #348]	; (800063c <main+0x474>)
 80004e0:	f002 fcd4 	bl	8002e8c <HAL_UART_Transmit>
			currentLapNum[6] = (uint16_t) (my_lap_data_packet.m_currentLapNum)
 80004e4:	4b56      	ldr	r3, [pc, #344]	; (8000640 <main+0x478>)
 80004e6:	795b      	ldrb	r3, [r3, #5]
					>> 8;
 80004e8:	121b      	asrs	r3, r3, #8
			currentLapNum[6] = (uint16_t) (my_lap_data_packet.m_currentLapNum)
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
			currentLapNum[7] = (uint16_t) (my_lap_data_packet.m_currentLapNum)
 80004f0:	4b53      	ldr	r3, [pc, #332]	; (8000640 <main+0x478>)
 80004f2:	795b      	ldrb	r3, [r3, #5]
 80004f4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
			HAL_UART_Transmit(&huart1, currentLapNum, sizeof(currentLapNum),
 80004f8:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80004fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000500:	2208      	movs	r2, #8
 8000502:	484e      	ldr	r0, [pc, #312]	; (800063c <main+0x474>)
 8000504:	f002 fcc2 	bl	8002e8c <HAL_UART_Transmit>
			totalLaps[6] = (uint16_t) (my_session_packet.m_totalLaps) >> 8;
 8000508:	4b4f      	ldr	r3, [pc, #316]	; (8000648 <main+0x480>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	121b      	asrs	r3, r3, #8
 800050e:	b2db      	uxtb	r3, r3
 8000510:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
			totalLaps[7] = (uint16_t) (my_session_packet.m_totalLaps) & 0xFF;
 8000514:	4b4c      	ldr	r3, [pc, #304]	; (8000648 <main+0x480>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			HAL_UART_Transmit(&huart1, totalLaps, sizeof(totalLaps), 1000);
 800051c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000524:	2208      	movs	r2, #8
 8000526:	4845      	ldr	r0, [pc, #276]	; (800063c <main+0x474>)
 8000528:	f002 fcb0 	bl	8002e8c <HAL_UART_Transmit>
					my_car_status_packet.m_frontLeftWingDamage);
 800052c:	4b47      	ldr	r3, [pc, #284]	; (800064c <main+0x484>)
 800052e:	781b      	ldrb	r3, [r3, #0]
			frontLeftWingDamage[18] = getdamageColorRG(
 8000530:	4618      	mov	r0, r3
 8000532:	f000 f9bf 	bl	80008b4 <getdamageColorRG>
 8000536:	4603      	mov	r3, r0
 8000538:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
			HAL_UART_Transmit(&huart1, frontLeftWingDamage,
 800053c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000544:	2214      	movs	r2, #20
 8000546:	483d      	ldr	r0, [pc, #244]	; (800063c <main+0x474>)
 8000548:	f002 fca0 	bl	8002e8c <HAL_UART_Transmit>
					my_car_status_packet.m_frontRightWingDamage);
 800054c:	4b3f      	ldr	r3, [pc, #252]	; (800064c <main+0x484>)
 800054e:	785b      	ldrb	r3, [r3, #1]
			frontRightWingDamage[18] = getdamageColorRG(
 8000550:	4618      	mov	r0, r3
 8000552:	f000 f9af 	bl	80008b4 <getdamageColorRG>
 8000556:	4603      	mov	r3, r0
 8000558:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			HAL_UART_Transmit(&huart1, frontRightWingDamage,
 800055c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000564:	2214      	movs	r2, #20
 8000566:	4835      	ldr	r0, [pc, #212]	; (800063c <main+0x474>)
 8000568:	f002 fc90 	bl	8002e8c <HAL_UART_Transmit>
					my_car_status_packet.m_rearWingDamage);
 800056c:	4b37      	ldr	r3, [pc, #220]	; (800064c <main+0x484>)
 800056e:	789b      	ldrb	r3, [r3, #2]
			rearWingDamage[18] = getdamageColorRG(
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f99f 	bl	80008b4 <getdamageColorRG>
 8000576:	4603      	mov	r3, r0
 8000578:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			HAL_UART_Transmit(&huart1, rearWingDamage, sizeof(rearWingDamage),
 800057c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000580:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000584:	2214      	movs	r2, #20
 8000586:	482d      	ldr	r0, [pc, #180]	; (800063c <main+0x474>)
 8000588:	f002 fc80 	bl	8002e8c <HAL_UART_Transmit>
					my_car_status_packet.m_engineDamage);
 800058c:	4b2f      	ldr	r3, [pc, #188]	; (800064c <main+0x484>)
 800058e:	78db      	ldrb	r3, [r3, #3]
			engineDamage[18] = getdamageColorRG(
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f98f 	bl	80008b4 <getdamageColorRG>
 8000596:	4603      	mov	r3, r0
 8000598:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
			HAL_UART_Transmit(&huart1, engineDamage, sizeof(engineDamage),
 800059c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80005a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a4:	2214      	movs	r2, #20
 80005a6:	4825      	ldr	r0, [pc, #148]	; (800063c <main+0x474>)
 80005a8:	f002 fc70 	bl	8002e8c <HAL_UART_Transmit>
			FRTyre[18] = getdamageColorRG(my_car_status_packet.m_tyresWear[0]);
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <main+0x484>)
 80005ae:	791b      	ldrb	r3, [r3, #4]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f97f 	bl	80008b4 <getdamageColorRG>
 80005b6:	4603      	mov	r3, r0
 80005b8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			HAL_UART_Transmit(&huart1, FRTyre, sizeof(FRTyre), 1000);
 80005bc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80005c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c4:	2214      	movs	r2, #20
 80005c6:	481d      	ldr	r0, [pc, #116]	; (800063c <main+0x474>)
 80005c8:	f002 fc60 	bl	8002e8c <HAL_UART_Transmit>
			FLTyre[18] = getdamageColorRG(my_car_status_packet.m_tyresWear[1]);
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <main+0x484>)
 80005ce:	795b      	ldrb	r3, [r3, #5]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f96f 	bl	80008b4 <getdamageColorRG>
 80005d6:	4603      	mov	r3, r0
 80005d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			HAL_UART_Transmit(&huart1, FLTyre, sizeof(FLTyre), 1000);
 80005dc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80005e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e4:	2214      	movs	r2, #20
 80005e6:	4815      	ldr	r0, [pc, #84]	; (800063c <main+0x474>)
 80005e8:	f002 fc50 	bl	8002e8c <HAL_UART_Transmit>
			BRTyre[18] = getdamageColorRG(my_car_status_packet.m_tyresWear[2]);
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <main+0x484>)
 80005ee:	799b      	ldrb	r3, [r3, #6]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f95f 	bl	80008b4 <getdamageColorRG>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			HAL_UART_Transmit(&huart1, BRTyre, sizeof(BRTyre), 1000);
 80005fc:	f107 0114 	add.w	r1, r7, #20
 8000600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000604:	2214      	movs	r2, #20
 8000606:	480d      	ldr	r0, [pc, #52]	; (800063c <main+0x474>)
 8000608:	f002 fc40 	bl	8002e8c <HAL_UART_Transmit>
			BLTyre[18] = getdamageColorRG(my_car_status_packet.m_tyresWear[3]);
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <main+0x484>)
 800060e:	79db      	ldrb	r3, [r3, #7]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f94f 	bl	80008b4 <getdamageColorRG>
 8000616:	4603      	mov	r3, r0
 8000618:	74bb      	strb	r3, [r7, #18]
			HAL_UART_Transmit(&huart1, BLTyre, sizeof(BLTyre), 1000);
 800061a:	4639      	mov	r1, r7
 800061c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000620:	2214      	movs	r2, #20
 8000622:	4806      	ldr	r0, [pc, #24]	; (800063c <main+0x474>)
 8000624:	f002 fc32 	bl	8002e8c <HAL_UART_Transmit>
			break;
 8000628:	e002      	b.n	8000630 <main+0x468>
			break;
 800062a:	bf00      	nop
 800062c:	e678      	b.n	8000320 <main+0x158>
			break;
 800062e:	bf00      	nop
		switch (my_ID) {
 8000630:	e676      	b.n	8000320 <main+0x158>
 8000632:	bf00      	nop
 8000634:	20000060 	.word	0x20000060
 8000638:	51eb851f 	.word	0x51eb851f
 800063c:	200000a8 	.word	0x200000a8
 8000640:	20000098 	.word	0x20000098
 8000644:	42c80000 	.word	0x42c80000
 8000648:	2000005c 	.word	0x2000005c
 800064c:	20000054 	.word	0x20000054

08000650 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b096      	sub	sp, #88	; 0x58
 8000654:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000656:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800065a:	2228      	movs	r2, #40	; 0x28
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f002 ff6c 	bl	800353c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
 8000682:	615a      	str	r2, [r3, #20]
 8000684:	619a      	str	r2, [r3, #24]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000686:	2302      	movs	r3, #2
 8000688:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068a:	2301      	movs	r3, #1
 800068c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068e:	2310      	movs	r3, #16
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000696:	2300      	movs	r3, #0
 8000698:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800069a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800069e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 f92f 	bl	8001908 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x64>
		Error_Handler();
 80006b0:	f000 f91a 	bl	80008e8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	2102      	movs	r1, #2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 f821 	bl	8002718 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x90>
		Error_Handler();
 80006dc:	f000 f904 	bl	80008e8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80006e8:	463b      	mov	r3, r7
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fa4a 	bl	8002b84 <HAL_RCCEx_PeriphCLKConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xaa>
		Error_Handler();
 80006f6:	f000 f8f7 	bl	80008e8 <Error_Handler>
	}
}
 80006fa:	bf00      	nop
 80006fc:	3758      	adds	r7, #88	; 0x58
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_CAN_Init+0x64>)
 800070a:	4a18      	ldr	r2, [pc, #96]	; (800076c <MX_CAN_Init+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 21;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_CAN_Init+0x64>)
 8000710:	2215      	movs	r2, #21
 8000712:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_CAN_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_CAN_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_CAN_Init+0x64>)
 8000722:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000726:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_CAN_Init+0x64>)
 800072a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800072e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_CAN_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_CAN_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_CAN_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_CAN_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_CAN_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_CAN_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_CAN_Init+0x64>)
 8000756:	f000 fabb 	bl	8000cd0 <HAL_CAN_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_CAN_Init+0x60>
		Error_Handler();
 8000760:	f000 f8c2 	bl	80008e8 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000070 	.word	0x20000070
 800076c:	40006400 	.word	0x40006400

08000770 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USART1_UART_Init+0x58>)
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <MX_USART1_UART_Init+0x5c>)
 8000778:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_USART1_UART_Init+0x58>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART1_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_USART1_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART1_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART1_UART_Init+0x58>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART1_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART1_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART1_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART1_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART1_UART_Init+0x58>)
 80007b4:	f002 fb1c 	bl	8002df0 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80007be:	f000 f893 	bl	80008e8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000a8 	.word	0x200000a8
 80007cc:	40013800 	.word	0x40013800

080007d0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <MX_GPIO_Init+0xd4>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a2e      	ldr	r2, [pc, #184]	; (80008a4 <MX_GPIO_Init+0xd4>)
 80007ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <MX_GPIO_Init+0xd4>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80007fe:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a28      	ldr	r2, [pc, #160]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000804:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <MX_GPIO_Init+0xd4>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <MX_GPIO_Init+0xd4>)
 800081c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000820:	6153      	str	r3, [r2, #20]
 8000822:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4a1c      	ldr	r2, [pc, #112]	; (80008a4 <MX_GPIO_Init+0xd4>)
 8000834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000838:	6153      	str	r3, [r2, #20]
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_GPIO_Init+0xd4>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800084c:	4816      	ldr	r0, [pc, #88]	; (80008a8 <MX_GPIO_Init+0xd8>)
 800084e:	f001 f805 	bl	800185c <HAL_GPIO_WritePin>
	GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000856:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_GPIO_Init+0xdc>)
 800085a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <MX_GPIO_Init+0xe0>)
 8000868:	f000 fe86 	bl	8001578 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800086c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000870:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4808      	ldr	r0, [pc, #32]	; (80008a8 <MX_GPIO_Init+0xd8>)
 8000886:	f000 fe77 	bl	8001578 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2028      	movs	r0, #40	; 0x28
 8000890:	f000 fe3b 	bl	800150a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000894:	2028      	movs	r0, #40	; 0x28
 8000896:	f000 fe54 	bl	8001542 <HAL_NVIC_EnableIRQ>

}
 800089a:	bf00      	nop
 800089c:	3728      	adds	r7, #40	; 0x28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000
 80008a8:	48000400 	.word	0x48000400
 80008ac:	10110000 	.word	0x10110000
 80008b0:	48000800 	.word	0x48000800

080008b4 <getdamageColorRG>:

/* USER CODE BEGIN 4 */
uint8_t getdamageColorRG(int damage) {
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	if (damage < FIRST_DAMAGE_TH) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b09      	cmp	r3, #9
 80008c0:	dc01      	bgt.n	80008c6 <getdamageColorRG+0x12>
		return 0x0F; //full green
 80008c2:	230f      	movs	r3, #15
 80008c4:	e00a      	b.n	80008dc <getdamageColorRG+0x28>
	} else if (damage < SECOND_DAMAGE_TH) { //almost no damage
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b31      	cmp	r3, #49	; 0x31
 80008ca:	dc01      	bgt.n	80008d0 <getdamageColorRG+0x1c>
		return 0xFA; //orange
 80008cc:	23fa      	movs	r3, #250	; 0xfa
 80008ce:	e005      	b.n	80008dc <getdamageColorRG+0x28>
	} else if (damage > SECOND_DAMAGE_TH) { //a lot of damage
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b32      	cmp	r3, #50	; 0x32
 80008d4:	dd01      	ble.n	80008da <getdamageColorRG+0x26>
		return 0xF0; //full red
 80008d6:	23f0      	movs	r3, #240	; 0xf0
 80008d8:	e000      	b.n	80008dc <getdamageColorRG+0x28>
	}
	return 0;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008ee:	e7fe      	b.n	80008ee <Error_Handler+0x6>

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_MspInit+0x44>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <HAL_MspInit+0x44>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6193      	str	r3, [r2, #24]
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <HAL_MspInit+0x44>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_MspInit+0x44>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_MspInit+0x44>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000918:	61d3      	str	r3, [r2, #28]
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_MspInit+0x44>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000926:	2007      	movs	r0, #7
 8000928:	f000 fde4 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <HAL_CAN_MspInit+0x90>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d131      	bne.n	80009be <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <HAL_CAN_MspInit+0x94>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <HAL_CAN_MspInit+0x94>)
 8000960:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000964:	61d3      	str	r3, [r2, #28]
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <HAL_CAN_MspInit+0x94>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <HAL_CAN_MspInit+0x94>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	4a15      	ldr	r2, [pc, #84]	; (80009cc <HAL_CAN_MspInit+0x94>)
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	6153      	str	r3, [r2, #20]
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <HAL_CAN_MspInit+0x94>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800098a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800099c:	2309      	movs	r3, #9
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009aa:	f000 fde5 	bl	8001578 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	2014      	movs	r0, #20
 80009b4:	f000 fda9 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80009b8:	2014      	movs	r0, #20
 80009ba:	f000 fdc2 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40006400 	.word	0x40006400
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_UART_MspInit+0x7c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d127      	bne.n	8000a42 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <HAL_UART_MspInit+0x80>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <HAL_UART_MspInit+0x80>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6193      	str	r3, [r2, #24]
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_UART_MspInit+0x80>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_UART_MspInit+0x80>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <HAL_UART_MspInit+0x80>)
 8000a10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a14:	6153      	str	r3, [r2, #20]
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_UART_MspInit+0x80>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a22:	2330      	movs	r3, #48	; 0x30
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a32:	2307      	movs	r3, #7
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <HAL_UART_MspInit+0x84>)
 8000a3e:	f000 fd9b 	bl	8001578 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40013800 	.word	0x40013800
 8000a50:	40021000 	.word	0x40021000
 8000a54:	48000800 	.word	0x48000800

08000a58 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000aa4:	f000 f8f4 	bl	8000c90 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <CAN_RX0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles CAN RX0 interrupt.
 */
void CAN_RX0_IRQHandler(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0


	if(HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, Rbuffer)!=HAL_OK){ //receive raw data in Rbuffer
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <CAN_RX0_IRQHandler+0x9c>)
 8000ab4:	4a25      	ldr	r2, [pc, #148]	; (8000b4c <CAN_RX0_IRQHandler+0xa0>)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4825      	ldr	r0, [pc, #148]	; (8000b50 <CAN_RX0_IRQHandler+0xa4>)
 8000aba:	f000 fb12 	bl	80010e2 <HAL_CAN_GetRxMessage>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <CAN_RX0_IRQHandler+0x1c>
		Error_Handler();
 8000ac4:	f7ff ff10 	bl	80008e8 <Error_Handler>
	}
	uint32_t debug = CAN_RI0R_STID;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <CAN_RX0_IRQHandler+0xa8>)
 8000aca:	607b      	str	r3, [r7, #4]

	switch (my_ID) {
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <CAN_RX0_IRQHandler+0xac>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d02f      	beq.n	8000b34 <CAN_RX0_IRQHandler+0x88>
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	d02f      	beq.n	8000b38 <CAN_RX0_IRQHandler+0x8c>
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d000      	beq.n	8000ade <CAN_RX0_IRQHandler+0x32>
		break;

		HAL_CAN_IRQHandler(&hcan);
	}

	/* USER CODE END CAN_RX0_IRQn 1 */}
 8000adc:	e02f      	b.n	8000b3e <CAN_RX0_IRQHandler+0x92>
		if (RxHeader.StdId >> 5 == car_telemetryID) {
 8000ade:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <CAN_RX0_IRQHandler+0xa0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	095b      	lsrs	r3, r3, #5
 8000ae4:	2b06      	cmp	r3, #6
 8000ae6:	d105      	bne.n	8000af4 <CAN_RX0_IRQHandler+0x48>
			memcpy(&my_car_telemetry_packet, &Rbuffer,
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <CAN_RX0_IRQHandler+0xb0>)
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <CAN_RX0_IRQHandler+0x9c>)
 8000aec:	6811      	ldr	r1, [r2, #0]
 8000aee:	6019      	str	r1, [r3, #0]
 8000af0:	7912      	ldrb	r2, [r2, #4]
 8000af2:	711a      	strb	r2, [r3, #4]
		if (RxHeader.StdId >> 5 == sessionID) {
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <CAN_RX0_IRQHandler+0xa0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	095b      	lsrs	r3, r3, #5
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d103      	bne.n	8000b06 <CAN_RX0_IRQHandler+0x5a>
			memcpy(&my_session_packet, &Rbuffer, sizeof(my_session_packet));
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <CAN_RX0_IRQHandler+0x9c>)
 8000b00:	781a      	ldrb	r2, [r3, #0]
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <CAN_RX0_IRQHandler+0xb4>)
 8000b04:	701a      	strb	r2, [r3, #0]
		if (RxHeader.StdId >> 5 == lapID) {
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <CAN_RX0_IRQHandler+0xa0>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d105      	bne.n	8000b1c <CAN_RX0_IRQHandler+0x70>
			memcpy(&my_lap_data_packet, &Rbuffer, sizeof(my_lap_data_packet));
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <CAN_RX0_IRQHandler+0xb8>)
 8000b12:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <CAN_RX0_IRQHandler+0x9c>)
 8000b14:	6811      	ldr	r1, [r2, #0]
 8000b16:	6019      	str	r1, [r3, #0]
 8000b18:	8892      	ldrh	r2, [r2, #4]
 8000b1a:	809a      	strh	r2, [r3, #4]
		if (RxHeader.StdId >> 5 == car_statusID) {
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <CAN_RX0_IRQHandler+0xa0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	095b      	lsrs	r3, r3, #5
 8000b22:	2b07      	cmp	r3, #7
 8000b24:	d10a      	bne.n	8000b3c <CAN_RX0_IRQHandler+0x90>
			memcpy(&my_car_status_packet, &Rbuffer,
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <CAN_RX0_IRQHandler+0xbc>)
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <CAN_RX0_IRQHandler+0x9c>)
 8000b2a:	6811      	ldr	r1, [r2, #0]
 8000b2c:	6852      	ldr	r2, [r2, #4]
 8000b2e:	6019      	str	r1, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
		break;
 8000b32:	e003      	b.n	8000b3c <CAN_RX0_IRQHandler+0x90>
		break;
 8000b34:	bf00      	nop
 8000b36:	e002      	b.n	8000b3e <CAN_RX0_IRQHandler+0x92>
		break;
 8000b38:	bf00      	nop
 8000b3a:	e000      	b.n	8000b3e <CAN_RX0_IRQHandler+0x92>
		break;
 8000b3c:	bf00      	nop
	/* USER CODE END CAN_RX0_IRQn 1 */}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000068 	.word	0x20000068
 8000b4c:	2000012c 	.word	0x2000012c
 8000b50:	20000070 	.word	0x20000070
 8000b54:	ffe00000 	.word	0xffe00000
 8000b58:	20000028 	.word	0x20000028
 8000b5c:	20000060 	.word	0x20000060
 8000b60:	2000005c 	.word	0x2000005c
 8000b64:	20000098 	.word	0x20000098
 8000b68:	20000054 	.word	0x20000054

08000b6c <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */
	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b74:	f000 fea4 	bl	80018c0 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000b78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <EXTI15_10_IRQHandler+0x1c>)
 8000b7e:	f000 fe85 	bl	800188c <HAL_GPIO_TogglePin>
	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	48000400 	.word	0x48000400

08000b8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <LoopForever+0x6>)
  ldr r1, =_edata
 8000bb6:	490e      	ldr	r1, [pc, #56]	; (8000bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <LoopForever+0xe>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bcc:	4c0b      	ldr	r4, [pc, #44]	; (8000bfc <LoopForever+0x16>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bda:	f7ff ffd7 	bl	8000b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bde:	f002 fc89 	bl	80034f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be2:	f7ff faf1 	bl	80001c8 <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000be8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bf4:	08003694 	.word	0x08003694
  ldr r2, =_sbss
 8000bf8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bfc:	2000014c 	.word	0x2000014c

08000c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_2_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x28>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_Init+0x28>)
 8000c0e:	f043 0310 	orr.w	r3, r3, #16
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 fc6d 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f000 f808 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fe66 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40022000 	.word	0x40022000

08000c30 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x54>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x58>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fc85 	bl	800155e <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00e      	b.n	8000c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d80a      	bhi.n	8000c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f000 fc4d 	bl	800150a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <HAL_InitTick+0x5c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000148 	.word	0x20000148

08000cb8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000148 	.word	0x20000148

08000cd0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e0ed      	b.n	8000ebe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d102      	bne.n	8000cf4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fe22 	bl	8000938 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f022 0202 	bic.w	r2, r2, #2
 8000d02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d04:	f7ff ffd8 	bl	8000cb8 <HAL_GetTick>
 8000d08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d0a:	e012      	b.n	8000d32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d0c:	f7ff ffd4 	bl	8000cb8 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b0a      	cmp	r3, #10
 8000d18:	d90b      	bls.n	8000d32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2205      	movs	r2, #5
 8000d2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e0c5      	b.n	8000ebe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0302 	and.w	r3, r3, #2
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1e5      	bne.n	8000d0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f042 0201 	orr.w	r2, r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d50:	f7ff ffb2 	bl	8000cb8 <HAL_GetTick>
 8000d54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d56:	e012      	b.n	8000d7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d58:	f7ff ffae 	bl	8000cb8 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b0a      	cmp	r3, #10
 8000d64:	d90b      	bls.n	8000d7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2205      	movs	r2, #5
 8000d76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e09f      	b.n	8000ebe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0e5      	beq.n	8000d58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	7e1b      	ldrb	r3, [r3, #24]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d108      	bne.n	8000da6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	e007      	b.n	8000db6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	7e5b      	ldrb	r3, [r3, #25]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d108      	bne.n	8000dd0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	e007      	b.n	8000de0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7e9b      	ldrb	r3, [r3, #26]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d108      	bne.n	8000dfa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f042 0220 	orr.w	r2, r2, #32
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	e007      	b.n	8000e0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 0220 	bic.w	r2, r2, #32
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7edb      	ldrb	r3, [r3, #27]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d108      	bne.n	8000e24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 0210 	bic.w	r2, r2, #16
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	e007      	b.n	8000e34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0210 	orr.w	r2, r2, #16
 8000e32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7f1b      	ldrb	r3, [r3, #28]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d108      	bne.n	8000e4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0208 	orr.w	r2, r2, #8
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	e007      	b.n	8000e5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f022 0208 	bic.w	r2, r2, #8
 8000e5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7f5b      	ldrb	r3, [r3, #29]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d108      	bne.n	8000e78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f042 0204 	orr.w	r2, r2, #4
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e007      	b.n	8000e88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 0204 	bic.w	r2, r2, #4
 8000e86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	431a      	orrs	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	ea42 0103 	orr.w	r1, r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	1e5a      	subs	r2, r3, #1
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b087      	sub	sp, #28
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000edc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ede:	7cfb      	ldrb	r3, [r7, #19]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d003      	beq.n	8000eec <HAL_CAN_ConfigFilter+0x26>
 8000ee4:	7cfb      	ldrb	r3, [r7, #19]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	f040 80aa 	bne.w	8001040 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ef2:	f043 0201 	orr.w	r2, r3, #1
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	f003 031f 	and.w	r3, r3, #31
 8000f04:	2201      	movs	r2, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d123      	bne.n	8000f6e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	401a      	ands	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f48:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3248      	adds	r2, #72	; 0x48
 8000f4e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f62:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f64:	6979      	ldr	r1, [r7, #20]
 8000f66:	3348      	adds	r3, #72	; 0x48
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d122      	bne.n	8000fbc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f96:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3248      	adds	r2, #72	; 0x48
 8000f9c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fb0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fb2:	6979      	ldr	r1, [r7, #20]
 8000fb4:	3348      	adds	r3, #72	; 0x48
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	440b      	add	r3, r1
 8000fba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d109      	bne.n	8000fd8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000fd6:	e007      	b.n	8000fe8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d109      	bne.n	8001004 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001002:	e007      	b.n	8001014 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	431a      	orrs	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d107      	bne.n	800102c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	431a      	orrs	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001032:	f023 0201 	bic.w	r2, r3, #1
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	e006      	b.n	800104e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
  }
}
 800104e:	4618      	mov	r0, r3
 8001050:	371c      	adds	r7, #28
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d12e      	bne.n	80010cc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2202      	movs	r2, #2
 8001072:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0201 	bic.w	r2, r2, #1
 8001084:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001086:	f7ff fe17 	bl	8000cb8 <HAL_GetTick>
 800108a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800108c:	e012      	b.n	80010b4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800108e:	f7ff fe13 	bl	8000cb8 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b0a      	cmp	r3, #10
 800109a:	d90b      	bls.n	80010b4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2205      	movs	r2, #5
 80010ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e012      	b.n	80010da <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1e5      	bne.n	800108e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e006      	b.n	80010da <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
  }
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010e2:	b480      	push	{r7}
 80010e4:	b087      	sub	sp, #28
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d003      	beq.n	8001106 <HAL_CAN_GetRxMessage+0x24>
 80010fe:	7dfb      	ldrb	r3, [r7, #23]
 8001100:	2b02      	cmp	r3, #2
 8001102:	f040 80f3 	bne.w	80012ec <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10e      	bne.n	800112a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d116      	bne.n	8001148 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e0e7      	b.n	80012fa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d107      	bne.n	8001148 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e0d8      	b.n	80012fa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	331b      	adds	r3, #27
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	4413      	add	r3, r2
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0204 	and.w	r2, r3, #4
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d10c      	bne.n	8001180 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	331b      	adds	r3, #27
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	4413      	add	r3, r2
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	0d5b      	lsrs	r3, r3, #21
 8001176:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e00b      	b.n	8001198 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	331b      	adds	r3, #27
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	4413      	add	r3, r2
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	08db      	lsrs	r3, r3, #3
 8001190:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	331b      	adds	r3, #27
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	4413      	add	r3, r2
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0202 	and.w	r2, r3, #2
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	331b      	adds	r3, #27
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	4413      	add	r3, r2
 80011ba:	3304      	adds	r3, #4
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 020f 	and.w	r2, r3, #15
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	331b      	adds	r3, #27
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	4413      	add	r3, r2
 80011d2:	3304      	adds	r3, #4
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	0a1b      	lsrs	r3, r3, #8
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	331b      	adds	r3, #27
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	4413      	add	r3, r2
 80011ea:	3304      	adds	r3, #4
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	0c1b      	lsrs	r3, r3, #16
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	4413      	add	r3, r2
 8001200:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	4413      	add	r3, r2
 8001216:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	0a1a      	lsrs	r2, r3, #8
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	4413      	add	r3, r2
 8001230:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	0c1a      	lsrs	r2, r3, #16
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	3302      	adds	r3, #2
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	4413      	add	r3, r2
 800124a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	0e1a      	lsrs	r2, r3, #24
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	3303      	adds	r3, #3
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	4413      	add	r3, r2
 8001264:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3304      	adds	r3, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	4413      	add	r3, r2
 800127c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	0a1a      	lsrs	r2, r3, #8
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	3305      	adds	r3, #5
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	4413      	add	r3, r2
 8001296:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	0c1a      	lsrs	r2, r3, #16
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	3306      	adds	r3, #6
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	4413      	add	r3, r2
 80012b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	0e1a      	lsrs	r2, r3, #24
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	3307      	adds	r3, #7
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d108      	bne.n	80012d8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0220 	orr.w	r2, r2, #32
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	e007      	b.n	80012e8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	691a      	ldr	r2, [r3, #16]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0220 	orr.w	r2, r2, #32
 80012e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	e006      	b.n	80012fa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
  }
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	371c      	adds	r7, #28
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001306:	b480      	push	{r7}
 8001308:	b085      	sub	sp, #20
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001316:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d002      	beq.n	8001324 <HAL_CAN_ActivateNotification+0x1e>
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d109      	bne.n	8001338 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6959      	ldr	r1, [r3, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	e006      	b.n	8001346 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
  }
}
 8001346:	4618      	mov	r0, r3
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f7ff ff8e 	bl	80013f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff29 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff3e 	bl	800139c <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ff8e 	bl	8001448 <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff5d 	bl	80013f4 <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff31 	bl	80013b8 <__NVIC_EnableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffa2 	bl	80014b0 <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001586:	e14e      	b.n	8001826 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2101      	movs	r1, #1
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 8140 	beq.w	8001820 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d00b      	beq.n	80015c0 <HAL_GPIO_Init+0x48>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d007      	beq.n	80015c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b4:	2b11      	cmp	r3, #17
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b12      	cmp	r3, #18
 80015be:	d130      	bne.n	8001622 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	2203      	movs	r2, #3
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68da      	ldr	r2, [r3, #12]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f6:	2201      	movs	r2, #1
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	f003 0201 	and.w	r2, r3, #1
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	2203      	movs	r2, #3
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0xea>
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b12      	cmp	r3, #18
 8001660:	d123      	bne.n	80016aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	08da      	lsrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3208      	adds	r2, #8
 800166a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	220f      	movs	r2, #15
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	08da      	lsrs	r2, r3, #3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3208      	adds	r2, #8
 80016a4:	6939      	ldr	r1, [r7, #16]
 80016a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	2203      	movs	r2, #3
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0203 	and.w	r2, r3, #3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 809a 	beq.w	8001820 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ec:	4b55      	ldr	r3, [pc, #340]	; (8001844 <HAL_GPIO_Init+0x2cc>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a54      	ldr	r2, [pc, #336]	; (8001844 <HAL_GPIO_Init+0x2cc>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b52      	ldr	r3, [pc, #328]	; (8001844 <HAL_GPIO_Init+0x2cc>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001704:	4a50      	ldr	r2, [pc, #320]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	089b      	lsrs	r3, r3, #2
 800170a:	3302      	adds	r3, #2
 800170c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	220f      	movs	r2, #15
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800172e:	d013      	beq.n	8001758 <HAL_GPIO_Init+0x1e0>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a46      	ldr	r2, [pc, #280]	; (800184c <HAL_GPIO_Init+0x2d4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d00d      	beq.n	8001754 <HAL_GPIO_Init+0x1dc>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a45      	ldr	r2, [pc, #276]	; (8001850 <HAL_GPIO_Init+0x2d8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d007      	beq.n	8001750 <HAL_GPIO_Init+0x1d8>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a44      	ldr	r2, [pc, #272]	; (8001854 <HAL_GPIO_Init+0x2dc>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d101      	bne.n	800174c <HAL_GPIO_Init+0x1d4>
 8001748:	2303      	movs	r3, #3
 800174a:	e006      	b.n	800175a <HAL_GPIO_Init+0x1e2>
 800174c:	2305      	movs	r3, #5
 800174e:	e004      	b.n	800175a <HAL_GPIO_Init+0x1e2>
 8001750:	2302      	movs	r3, #2
 8001752:	e002      	b.n	800175a <HAL_GPIO_Init+0x1e2>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <HAL_GPIO_Init+0x1e2>
 8001758:	2300      	movs	r3, #0
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	f002 0203 	and.w	r2, r2, #3
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	4093      	lsls	r3, r2
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800176a:	4937      	ldr	r1, [pc, #220]	; (8001848 <HAL_GPIO_Init+0x2d0>)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3302      	adds	r3, #2
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001778:	4b37      	ldr	r3, [pc, #220]	; (8001858 <HAL_GPIO_Init+0x2e0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800179c:	4a2e      	ldr	r2, [pc, #184]	; (8001858 <HAL_GPIO_Init+0x2e0>)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017a2:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <HAL_GPIO_Init+0x2e0>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017c6:	4a24      	ldr	r2, [pc, #144]	; (8001858 <HAL_GPIO_Init+0x2e0>)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <HAL_GPIO_Init+0x2e0>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_GPIO_Init+0x2e0>)
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f6:	4b18      	ldr	r3, [pc, #96]	; (8001858 <HAL_GPIO_Init+0x2e0>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800181a:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <HAL_GPIO_Init+0x2e0>)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	3301      	adds	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	f47f aea9 	bne.w	8001588 <HAL_GPIO_Init+0x10>
  }
}
 8001836:	bf00      	nop
 8001838:	371c      	adds	r7, #28
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	40010000 	.word	0x40010000
 800184c:	48000400 	.word	0x48000400
 8001850:	48000800 	.word	0x48000800
 8001854:	48000c00 	.word	0x48000c00
 8001858:	40010400 	.word	0x40010400

0800185c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001878:	e002      	b.n	8001880 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4013      	ands	r3, r2
 80018a4:	041a      	lsls	r2, r3, #16
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43d9      	mvns	r1, r3
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	400b      	ands	r3, r1
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	619a      	str	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018d6:	4a05      	ldr	r2, [pc, #20]	; (80018ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f806 	bl	80018f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40010400 	.word	0x40010400

080018f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800190e:	af00      	add	r7, sp, #0
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	f000 bef4 	b.w	800270a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 816a 	beq.w	8001c06 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001932:	4bb3      	ldr	r3, [pc, #716]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b04      	cmp	r3, #4
 800193c:	d00c      	beq.n	8001958 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800193e:	4bb0      	ldr	r3, [pc, #704]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b08      	cmp	r3, #8
 8001948:	d159      	bne.n	80019fe <HAL_RCC_OscConfig+0xf6>
 800194a:	4bad      	ldr	r3, [pc, #692]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001956:	d152      	bne.n	80019fe <HAL_RCC_OscConfig+0xf6>
 8001958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800195c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800196c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b01      	cmp	r3, #1
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x82>
 8001984:	4b9e      	ldr	r3, [pc, #632]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	e015      	b.n	80019b6 <HAL_RCC_OscConfig+0xae>
 800198a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800198e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800199e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019a2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80019a6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80019aa:	fa93 f3a3 	rbit	r3, r3
 80019ae:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80019b2:	4b93      	ldr	r3, [pc, #588]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ba:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80019be:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80019c2:	fa92 f2a2 	rbit	r2, r2
 80019c6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80019ca:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80019ce:	fab2 f282 	clz	r2, r2
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	f042 0220 	orr.w	r2, r2, #32
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	f002 021f 	and.w	r2, r2, #31
 80019de:	2101      	movs	r1, #1
 80019e0:	fa01 f202 	lsl.w	r2, r1, r2
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 810c 	beq.w	8001c04 <HAL_RCC_OscConfig+0x2fc>
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 8106 	bne.w	8001c04 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	f000 be86 	b.w	800270a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a08:	d106      	bne.n	8001a18 <HAL_RCC_OscConfig+0x110>
 8001a0a:	4b7d      	ldr	r3, [pc, #500]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a7c      	ldr	r2, [pc, #496]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e030      	b.n	8001a7a <HAL_RCC_OscConfig+0x172>
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x134>
 8001a22:	4b77      	ldr	r3, [pc, #476]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a76      	ldr	r2, [pc, #472]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b74      	ldr	r3, [pc, #464]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a73      	ldr	r2, [pc, #460]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e01e      	b.n	8001a7a <HAL_RCC_OscConfig+0x172>
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a46:	d10c      	bne.n	8001a62 <HAL_RCC_OscConfig+0x15a>
 8001a48:	4b6d      	ldr	r3, [pc, #436]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a6c      	ldr	r2, [pc, #432]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a69      	ldr	r2, [pc, #420]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	e00b      	b.n	8001a7a <HAL_RCC_OscConfig+0x172>
 8001a62:	4b67      	ldr	r3, [pc, #412]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a66      	ldr	r2, [pc, #408]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b64      	ldr	r3, [pc, #400]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a63      	ldr	r2, [pc, #396]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a78:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a7a:	4b61      	ldr	r3, [pc, #388]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	f023 020f 	bic.w	r2, r3, #15
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	495d      	ldr	r1, [pc, #372]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d059      	beq.n	8001b4c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff f90e 	bl	8000cb8 <HAL_GetTick>
 8001a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa0:	e00a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa2:	f7ff f909 	bl	8000cb8 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	; 0x64
 8001ab0:	d902      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	f000 be29 	b.w	800270a <HAL_RCC_OscConfig+0xe02>
 8001ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001abc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ac4:	fa93 f3a3 	rbit	r3, r3
 8001ac8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001acc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d102      	bne.n	8001aea <HAL_RCC_OscConfig+0x1e2>
 8001ae4:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	e015      	b.n	8001b16 <HAL_RCC_OscConfig+0x20e>
 8001aea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001afe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b02:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b06:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001b12:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b1a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b1e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b22:	fa92 f2a2 	rbit	r2, r2
 8001b26:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001b2a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001b2e:	fab2 f282 	clz	r2, r2
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	f042 0220 	orr.w	r2, r2, #32
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	f002 021f 	and.w	r2, r2, #31
 8001b3e:	2101      	movs	r1, #1
 8001b40:	fa01 f202 	lsl.w	r2, r1, r2
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0ab      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x19a>
 8001b4a:	e05c      	b.n	8001c06 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f8b4 	bl	8000cb8 <HAL_GetTick>
 8001b50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b54:	e00a      	b.n	8001b6c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b56:	f7ff f8af 	bl	8000cb8 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d902      	bls.n	8001b6c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	f000 bdcf 	b.w	800270a <HAL_RCC_OscConfig+0xe02>
 8001b6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b70:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b78:	fa93 f3a3 	rbit	r3, r3
 8001b7c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b80:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d102      	bne.n	8001b9e <HAL_RCC_OscConfig+0x296>
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	e015      	b.n	8001bca <HAL_RCC_OscConfig+0x2c2>
 8001b9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001bb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001bba:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_RCC_OscConfig+0x2f8>)
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bce:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001bd2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001bd6:	fa92 f2a2 	rbit	r2, r2
 8001bda:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001bde:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001be2:	fab2 f282 	clz	r2, r2
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	f042 0220 	orr.w	r2, r2, #32
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	f002 021f 	and.w	r2, r2, #31
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ab      	bne.n	8001b56 <HAL_RCC_OscConfig+0x24e>
 8001bfe:	e002      	b.n	8001c06 <HAL_RCC_OscConfig+0x2fe>
 8001c00:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 816f 	beq.w	8001ef4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c16:	4bd0      	ldr	r3, [pc, #832]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c22:	4bcd      	ldr	r3, [pc, #820]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d16c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x400>
 8001c2e:	4bca      	ldr	r3, [pc, #808]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d166      	bne.n	8001d08 <HAL_RCC_OscConfig+0x400>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001c4c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d102      	bne.n	8001c6a <HAL_RCC_OscConfig+0x362>
 8001c64:	4bbc      	ldr	r3, [pc, #752]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	e013      	b.n	8001c92 <HAL_RCC_OscConfig+0x38a>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c74:	fa93 f3a3 	rbit	r3, r3
 8001c78:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c82:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c8e:	4bb2      	ldr	r3, [pc, #712]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	2202      	movs	r2, #2
 8001c94:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c98:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c9c:	fa92 f2a2 	rbit	r2, r2
 8001ca0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ca4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001ca8:	fab2 f282 	clz	r2, r2
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f042 0220 	orr.w	r2, r2, #32
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	f002 021f 	and.w	r2, r2, #31
 8001cb8:	2101      	movs	r1, #1
 8001cba:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x3cc>
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d002      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	f000 bd1b 	b.w	800270a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	4ba0      	ldr	r3, [pc, #640]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	21f8      	movs	r1, #248	; 0xf8
 8001ce4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001cec:	fa91 f1a1 	rbit	r1, r1
 8001cf0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001cf4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001cf8:	fab1 f181 	clz	r1, r1
 8001cfc:	b2c9      	uxtb	r1, r1
 8001cfe:	408b      	lsls	r3, r1
 8001d00:	4995      	ldr	r1, [pc, #596]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	e0f5      	b.n	8001ef4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8085 	beq.w	8001e1e <HAL_RCC_OscConfig+0x516>
 8001d14:	2301      	movs	r3, #1
 8001d16:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001d26:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d2a:	fab3 f383 	clz	r3, r3
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7fe ffba 	bl	8000cb8 <HAL_GetTick>
 8001d44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7fe ffb5 	bl	8000cb8 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d902      	bls.n	8001d60 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	f000 bcd5 	b.w	800270a <HAL_RCC_OscConfig+0xe02>
 8001d60:	2302      	movs	r3, #2
 8001d62:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d66:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d72:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	095b      	lsrs	r3, r3, #5
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d102      	bne.n	8001d90 <HAL_RCC_OscConfig+0x488>
 8001d8a:	4b73      	ldr	r3, [pc, #460]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	e013      	b.n	8001db8 <HAL_RCC_OscConfig+0x4b0>
 8001d90:	2302      	movs	r3, #2
 8001d92:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001da2:	2302      	movs	r3, #2
 8001da4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001da8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001db4:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	2202      	movs	r2, #2
 8001dba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001dbe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001dc2:	fa92 f2a2 	rbit	r2, r2
 8001dc6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001dca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001dce:	fab2 f282 	clz	r2, r2
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f042 0220 	orr.w	r2, r2, #32
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f002 021f 	and.w	r2, r2, #31
 8001dde:	2101      	movs	r1, #1
 8001de0:	fa01 f202 	lsl.w	r2, r1, r2
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0af      	beq.n	8001d4a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b5b      	ldr	r3, [pc, #364]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	21f8      	movs	r1, #248	; 0xf8
 8001dfa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e02:	fa91 f1a1 	rbit	r1, r1
 8001e06:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001e0a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001e0e:	fab1 f181 	clz	r1, r1
 8001e12:	b2c9      	uxtb	r1, r1
 8001e14:	408b      	lsls	r3, r1
 8001e16:	4950      	ldr	r1, [pc, #320]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
 8001e1c:	e06a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x5ec>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001e30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e34:	fab3 f383 	clz	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e3e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	461a      	mov	r2, r3
 8001e46:	2300      	movs	r3, #0
 8001e48:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7fe ff35 	bl	8000cb8 <HAL_GetTick>
 8001e4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e54:	f7fe ff30 	bl	8000cb8 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d902      	bls.n	8001e6a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	f000 bc50 	b.w	800270a <HAL_RCC_OscConfig+0xe02>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d102      	bne.n	8001e9a <HAL_RCC_OscConfig+0x592>
 8001e94:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	e013      	b.n	8001ec2 <HAL_RCC_OscConfig+0x5ba>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001eac:	2302      	movs	r3, #2
 8001eae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001eb2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ebe:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <HAL_RCC_OscConfig+0x650>)
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001ec8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ecc:	fa92 f2a2 	rbit	r2, r2
 8001ed0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001ed4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ed8:	fab2 f282 	clz	r2, r2
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	f042 0220 	orr.w	r2, r2, #32
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f002 021f 	and.w	r2, r2, #31
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f202 	lsl.w	r2, r1, r2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1af      	bne.n	8001e54 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80da 	beq.w	80020b8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d069      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x6da>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f24:	fab3 f383 	clz	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_OscConfig+0x654>)
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	461a      	mov	r2, r3
 8001f34:	2301      	movs	r3, #1
 8001f36:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f38:	f7fe febe 	bl	8000cb8 <HAL_GetTick>
 8001f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f40:	e00e      	b.n	8001f60 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f42:	f7fe feb9 	bl	8000cb8 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d906      	bls.n	8001f60 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e3d9      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	10908120 	.word	0x10908120
 8001f60:	2302      	movs	r3, #2
 8001f62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f72:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f76:	2202      	movs	r2, #2
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	fa93 f2a3 	rbit	r2, r3
 8001f84:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f8e:	2202      	movs	r2, #2
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fa93 f2a3 	rbit	r2, r3
 8001f9c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001fa0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa2:	4ba5      	ldr	r3, [pc, #660]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 8001fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fa6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001faa:	2102      	movs	r1, #2
 8001fac:	6019      	str	r1, [r3, #0]
 8001fae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	fa93 f1a3 	rbit	r1, r3
 8001fb8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fbc:	6019      	str	r1, [r3, #0]
  return result;
 8001fbe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0b0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x63a>
 8001fe0:	e06a      	b.n	80020b8 <HAL_RCC_OscConfig+0x7b0>
 8001fe2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fa93 f2a3 	rbit	r2, r3
 8001ff4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ff8:	601a      	str	r2, [r3, #0]
  return result;
 8001ffa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ffe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	4b8c      	ldr	r3, [pc, #560]	; (800223c <HAL_RCC_OscConfig+0x934>)
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	461a      	mov	r2, r3
 8002010:	2300      	movs	r3, #0
 8002012:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002014:	f7fe fe50 	bl	8000cb8 <HAL_GetTick>
 8002018:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	e009      	b.n	8002032 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201e:	f7fe fe4b 	bl	8000cb8 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e36b      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
 8002032:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002036:	2202      	movs	r2, #2
 8002038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	fa93 f2a3 	rbit	r2, r3
 8002044:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800204e:	2202      	movs	r2, #2
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	fa93 f2a3 	rbit	r2, r3
 800205c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002066:	2202      	movs	r2, #2
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	fa93 f2a3 	rbit	r2, r3
 8002074:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002078:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207a:	4b6f      	ldr	r3, [pc, #444]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 800207c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800207e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002082:	2102      	movs	r1, #2
 8002084:	6019      	str	r1, [r3, #0]
 8002086:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	fa93 f1a3 	rbit	r1, r3
 8002090:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002094:	6019      	str	r1, [r3, #0]
  return result;
 8002096:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	2101      	movs	r1, #1
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1b2      	bne.n	800201e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8158 	beq.w	8002378 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ce:	4b5a      	ldr	r3, [pc, #360]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d112      	bne.n	8002100 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	4b57      	ldr	r3, [pc, #348]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	4a56      	ldr	r2, [pc, #344]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	61d3      	str	r3, [r2, #28]
 80020e6:	4b54      	ldr	r3, [pc, #336]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80020ee:	f107 0308 	add.w	r3, r7, #8
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	f107 0308 	add.w	r3, r7, #8
 80020f8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002100:	4b4f      	ldr	r3, [pc, #316]	; (8002240 <HAL_RCC_OscConfig+0x938>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d11a      	bne.n	8002142 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210c:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <HAL_RCC_OscConfig+0x938>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a4b      	ldr	r2, [pc, #300]	; (8002240 <HAL_RCC_OscConfig+0x938>)
 8002112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002116:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002118:	f7fe fdce 	bl	8000cb8 <HAL_GetTick>
 800211c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	e009      	b.n	8002136 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002122:	f7fe fdc9 	bl	8000cb8 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e2e9      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b42      	ldr	r3, [pc, #264]	; (8002240 <HAL_RCC_OscConfig+0x938>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0ef      	beq.n	8002122 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x852>
 800214c:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	4a39      	ldr	r2, [pc, #228]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6213      	str	r3, [r2, #32]
 8002158:	e02f      	b.n	80021ba <HAL_RCC_OscConfig+0x8b2>
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10c      	bne.n	800217e <HAL_RCC_OscConfig+0x876>
 8002164:	4b34      	ldr	r3, [pc, #208]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	4a33      	ldr	r2, [pc, #204]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	6213      	str	r3, [r2, #32]
 8002170:	4b31      	ldr	r3, [pc, #196]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a30      	ldr	r2, [pc, #192]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 8002176:	f023 0304 	bic.w	r3, r3, #4
 800217a:	6213      	str	r3, [r2, #32]
 800217c:	e01d      	b.n	80021ba <HAL_RCC_OscConfig+0x8b2>
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b05      	cmp	r3, #5
 8002186:	d10c      	bne.n	80021a2 <HAL_RCC_OscConfig+0x89a>
 8002188:	4b2b      	ldr	r3, [pc, #172]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4a2a      	ldr	r2, [pc, #168]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	6213      	str	r3, [r2, #32]
 8002194:	4b28      	ldr	r3, [pc, #160]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a27      	ldr	r2, [pc, #156]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	e00b      	b.n	80021ba <HAL_RCC_OscConfig+0x8b2>
 80021a2:	4b25      	ldr	r3, [pc, #148]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4a24      	ldr	r2, [pc, #144]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	6213      	str	r3, [r2, #32]
 80021ae:	4b22      	ldr	r3, [pc, #136]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a21      	ldr	r2, [pc, #132]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 80021b4:	f023 0304 	bic.w	r3, r3, #4
 80021b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d06b      	beq.n	800229c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c4:	f7fe fd78 	bl	8000cb8 <HAL_GetTick>
 80021c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	e00b      	b.n	80021e6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7fe fd73 	bl	8000cb8 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e291      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
 80021e6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021ea:	2202      	movs	r2, #2
 80021ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	fa93 f2a3 	rbit	r2, r3
 80021f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002202:	2202      	movs	r2, #2
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	fa93 f2a3 	rbit	r2, r3
 8002210:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002214:	601a      	str	r2, [r3, #0]
  return result;
 8002216:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800221a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	b2db      	uxtb	r3, r3
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d109      	bne.n	8002244 <HAL_RCC_OscConfig+0x93c>
 8002230:	4b01      	ldr	r3, [pc, #4]	; (8002238 <HAL_RCC_OscConfig+0x930>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	e014      	b.n	8002260 <HAL_RCC_OscConfig+0x958>
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	10908120 	.word	0x10908120
 8002240:	40007000 	.word	0x40007000
 8002244:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002248:	2202      	movs	r2, #2
 800224a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	fa93 f2a3 	rbit	r2, r3
 8002256:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	4bbb      	ldr	r3, [pc, #748]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002264:	2102      	movs	r1, #2
 8002266:	6011      	str	r1, [r2, #0]
 8002268:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	fa92 f1a2 	rbit	r1, r2
 8002272:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002276:	6011      	str	r1, [r2, #0]
  return result;
 8002278:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	fab2 f282 	clz	r2, r2
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	f002 021f 	and.w	r2, r2, #31
 800228e:	2101      	movs	r1, #1
 8002290:	fa01 f202 	lsl.w	r2, r1, r2
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d099      	beq.n	80021ce <HAL_RCC_OscConfig+0x8c6>
 800229a:	e063      	b.n	8002364 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229c:	f7fe fd0c 	bl	8000cb8 <HAL_GetTick>
 80022a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a4:	e00b      	b.n	80022be <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7fe fd07 	bl	8000cb8 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e225      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
 80022be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022c2:	2202      	movs	r2, #2
 80022c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f2a3 	rbit	r2, r3
 80022d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022da:	2202      	movs	r2, #2
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	fa93 f2a3 	rbit	r2, r3
 80022e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022ec:	601a      	str	r2, [r3, #0]
  return result;
 80022ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d102      	bne.n	800230e <HAL_RCC_OscConfig+0xa06>
 8002308:	4b90      	ldr	r3, [pc, #576]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	e00d      	b.n	800232a <HAL_RCC_OscConfig+0xa22>
 800230e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002312:	2202      	movs	r2, #2
 8002314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	fa93 f2a3 	rbit	r2, r3
 8002320:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	4b89      	ldr	r3, [pc, #548]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800232e:	2102      	movs	r1, #2
 8002330:	6011      	str	r1, [r2, #0]
 8002332:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	fa92 f1a2 	rbit	r1, r2
 800233c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002340:	6011      	str	r1, [r2, #0]
  return result;
 8002342:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	fab2 f282 	clz	r2, r2
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	f002 021f 	and.w	r2, r2, #31
 8002358:	2101      	movs	r1, #1
 800235a:	fa01 f202 	lsl.w	r2, r1, r2
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1a0      	bne.n	80022a6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002364:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002368:	2b01      	cmp	r3, #1
 800236a:	d105      	bne.n	8002378 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236c:	4b77      	ldr	r3, [pc, #476]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	4a76      	ldr	r2, [pc, #472]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 8002372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002376:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 81c2 	beq.w	8002708 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002384:	4b71      	ldr	r3, [pc, #452]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b08      	cmp	r3, #8
 800238e:	f000 819c 	beq.w	80026ca <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	2b02      	cmp	r3, #2
 800239a:	f040 8114 	bne.w	80025c6 <HAL_RCC_OscConfig+0xcbe>
 800239e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	fa93 f2a3 	rbit	r2, r3
 80023b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023b6:	601a      	str	r2, [r3, #0]
  return result;
 80023b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	461a      	mov	r2, r3
 80023d0:	2300      	movs	r3, #0
 80023d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fe fc70 	bl	8000cb8 <HAL_GetTick>
 80023d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023dc:	e009      	b.n	80023f2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023de:	f7fe fc6b 	bl	8000cb8 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e18b      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
 80023f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	fa93 f2a3 	rbit	r2, r3
 8002406:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800240a:	601a      	str	r2, [r3, #0]
  return result;
 800240c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002410:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d102      	bne.n	800242c <HAL_RCC_OscConfig+0xb24>
 8002426:	4b49      	ldr	r3, [pc, #292]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	e01b      	b.n	8002464 <HAL_RCC_OscConfig+0xb5c>
 800242c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002430:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	fa93 f2a3 	rbit	r2, r3
 8002440:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800244a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	fa93 f2a3 	rbit	r2, r3
 800245a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	4b3a      	ldr	r3, [pc, #232]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002468:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800246c:	6011      	str	r1, [r2, #0]
 800246e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	fa92 f1a2 	rbit	r1, r2
 8002478:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800247c:	6011      	str	r1, [r2, #0]
  return result;
 800247e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	fab2 f282 	clz	r2, r2
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	f042 0220 	orr.w	r2, r2, #32
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f002 021f 	and.w	r2, r2, #31
 8002494:	2101      	movs	r1, #1
 8002496:	fa01 f202 	lsl.w	r2, r1, r2
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d19e      	bne.n	80023de <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a0:	4b2a      	ldr	r3, [pc, #168]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	4925      	ldr	r1, [pc, #148]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
 80024bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	fa93 f2a3 	rbit	r2, r3
 80024d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024d4:	601a      	str	r2, [r3, #0]
  return result;
 80024d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024da:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	461a      	mov	r2, r3
 80024ee:	2301      	movs	r3, #1
 80024f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f2:	f7fe fbe1 	bl	8000cb8 <HAL_GetTick>
 80024f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024fa:	e009      	b.n	8002510 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe fbdc 	bl	8000cb8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e0fc      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
 8002510:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	fa93 f2a3 	rbit	r2, r3
 8002524:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002528:	601a      	str	r2, [r3, #0]
  return result;
 800252a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800252e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	b2db      	uxtb	r3, r3
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d105      	bne.n	8002550 <HAL_RCC_OscConfig+0xc48>
 8002544:	4b01      	ldr	r3, [pc, #4]	; (800254c <HAL_RCC_OscConfig+0xc44>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	e01e      	b.n	8002588 <HAL_RCC_OscConfig+0xc80>
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002554:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800256e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fa93 f2a3 	rbit	r2, r3
 800257e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	4b63      	ldr	r3, [pc, #396]	; (8002714 <HAL_RCC_OscConfig+0xe0c>)
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800258c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002590:	6011      	str	r1, [r2, #0]
 8002592:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	fa92 f1a2 	rbit	r1, r2
 800259c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80025a0:	6011      	str	r1, [r2, #0]
  return result;
 80025a2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f002 021f 	and.w	r2, r2, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d09b      	beq.n	80024fc <HAL_RCC_OscConfig+0xbf4>
 80025c4:	e0a0      	b.n	8002708 <HAL_RCC_OscConfig+0xe00>
 80025c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	fa93 f2a3 	rbit	r2, r3
 80025da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025de:	601a      	str	r2, [r3, #0]
  return result;
 80025e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	461a      	mov	r2, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe fb5c 	bl	8000cb8 <HAL_GetTick>
 8002600:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002604:	e009      	b.n	800261a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002606:	f7fe fb57 	bl	8000cb8 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e077      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
 800261a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800261e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	fa93 f2a3 	rbit	r2, r3
 800262e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002632:	601a      	str	r2, [r3, #0]
  return result;
 8002634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002638:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d102      	bne.n	8002654 <HAL_RCC_OscConfig+0xd4c>
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <HAL_RCC_OscConfig+0xe0c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	e01b      	b.n	800268c <HAL_RCC_OscConfig+0xd84>
 8002654:	f107 0320 	add.w	r3, r7, #32
 8002658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800265c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f107 0320 	add.w	r3, r7, #32
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	fa93 f2a3 	rbit	r2, r3
 8002668:	f107 031c 	add.w	r3, r7, #28
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	f107 0318 	add.w	r3, r7, #24
 8002672:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f107 0318 	add.w	r3, r7, #24
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	fa93 f2a3 	rbit	r2, r3
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <HAL_RCC_OscConfig+0xe0c>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	f107 0210 	add.w	r2, r7, #16
 8002690:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002694:	6011      	str	r1, [r2, #0]
 8002696:	f107 0210 	add.w	r2, r7, #16
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	fa92 f1a2 	rbit	r1, r2
 80026a0:	f107 020c 	add.w	r2, r7, #12
 80026a4:	6011      	str	r1, [r2, #0]
  return result;
 80026a6:	f107 020c 	add.w	r2, r7, #12
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	fab2 f282 	clz	r2, r2
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	f042 0220 	orr.w	r2, r2, #32
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	f002 021f 	and.w	r2, r2, #31
 80026bc:	2101      	movs	r1, #1
 80026be:	fa01 f202 	lsl.w	r2, r1, r2
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d19e      	bne.n	8002606 <HAL_RCC_OscConfig+0xcfe>
 80026c8:	e01e      	b.n	8002708 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e018      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <HAL_RCC_OscConfig+0xe0c>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026e0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d108      	bne.n	8002704 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80026f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80026f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000

08002718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b09e      	sub	sp, #120	; 0x78
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e162      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002730:	4b90      	ldr	r3, [pc, #576]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d910      	bls.n	8002760 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b8d      	ldr	r3, [pc, #564]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 0207 	bic.w	r2, r3, #7
 8002746:	498b      	ldr	r1, [pc, #556]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274e:	4b89      	ldr	r3, [pc, #548]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d001      	beq.n	8002760 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e14a      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800276c:	4b82      	ldr	r3, [pc, #520]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	497f      	ldr	r1, [pc, #508]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80dc 	beq.w	8002944 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d13c      	bne.n	800280e <HAL_RCC_ClockConfig+0xf6>
 8002794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002798:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d102      	bne.n	80027be <HAL_RCC_ClockConfig+0xa6>
 80027b8:	4b6f      	ldr	r3, [pc, #444]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	e00f      	b.n	80027de <HAL_RCC_ClockConfig+0xc6>
 80027be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	667b      	str	r3, [r7, #100]	; 0x64
 80027cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d0:	663b      	str	r3, [r7, #96]	; 0x60
 80027d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027da:	4b67      	ldr	r3, [pc, #412]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80027e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027e6:	fa92 f2a2 	rbit	r2, r2
 80027ea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027ee:	fab2 f282 	clz	r2, r2
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f042 0220 	orr.w	r2, r2, #32
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f002 021f 	and.w	r2, r2, #31
 80027fe:	2101      	movs	r1, #1
 8002800:	fa01 f202 	lsl.w	r2, r1, r2
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d17b      	bne.n	8002902 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0f3      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d13c      	bne.n	8002890 <HAL_RCC_ClockConfig+0x178>
 8002816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800281a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	095b      	lsrs	r3, r3, #5
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d102      	bne.n	8002840 <HAL_RCC_ClockConfig+0x128>
 800283a:	4b4f      	ldr	r3, [pc, #316]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	e00f      	b.n	8002860 <HAL_RCC_ClockConfig+0x148>
 8002840:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002844:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	647b      	str	r3, [r7, #68]	; 0x44
 800284e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002852:	643b      	str	r3, [r7, #64]	; 0x40
 8002854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800285c:	4b46      	ldr	r3, [pc, #280]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002864:	63ba      	str	r2, [r7, #56]	; 0x38
 8002866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002868:	fa92 f2a2 	rbit	r2, r2
 800286c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800286e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f042 0220 	orr.w	r2, r2, #32
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f002 021f 	and.w	r2, r2, #31
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d13a      	bne.n	8002902 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0b2      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
 8002890:	2302      	movs	r3, #2
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d102      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x1a0>
 80028b2:	4b31      	ldr	r3, [pc, #196]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	e00d      	b.n	80028d4 <HAL_RCC_ClockConfig+0x1bc>
 80028b8:	2302      	movs	r3, #2
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
 80028c4:	2302      	movs	r3, #2
 80028c6:	623b      	str	r3, [r7, #32]
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	4b29      	ldr	r3, [pc, #164]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	2202      	movs	r2, #2
 80028d6:	61ba      	str	r2, [r7, #24]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	fa92 f2a2 	rbit	r2, r2
 80028de:	617a      	str	r2, [r7, #20]
  return result;
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	fab2 f282 	clz	r2, r2
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	f042 0220 	orr.w	r2, r2, #32
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	f002 021f 	and.w	r2, r2, #31
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f202 	lsl.w	r2, r1, r2
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e079      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002902:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f023 0203 	bic.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	491a      	ldr	r1, [pc, #104]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002914:	f7fe f9d0 	bl	8000cb8 <HAL_GetTick>
 8002918:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	e00a      	b.n	8002932 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291c:	f7fe f9cc 	bl	8000cb8 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e061      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_RCC_ClockConfig+0x260>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 020c 	and.w	r2, r3, #12
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	429a      	cmp	r2, r3
 8002942:	d1eb      	bne.n	800291c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d214      	bcs.n	800297c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b08      	ldr	r3, [pc, #32]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 0207 	bic.w	r2, r3, #7
 800295a:	4906      	ldr	r1, [pc, #24]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002962:	4b04      	ldr	r3, [pc, #16]	; (8002974 <HAL_RCC_ClockConfig+0x25c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e040      	b.n	80029f6 <HAL_RCC_ClockConfig+0x2de>
 8002974:	40022000 	.word	0x40022000
 8002978:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002988:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	491a      	ldr	r1, [pc, #104]	; (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 8002996:	4313      	orrs	r3, r2
 8002998:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4912      	ldr	r1, [pc, #72]	; (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029ba:	f000 f829 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 80029be:	4601      	mov	r1, r0
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <HAL_RCC_ClockConfig+0x2e8>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c8:	22f0      	movs	r2, #240	; 0xf0
 80029ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	fa92 f2a2 	rbit	r2, r2
 80029d2:	60fa      	str	r2, [r7, #12]
  return result;
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	fab2 f282 	clz	r2, r2
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	40d3      	lsrs	r3, r2
 80029de:	4a09      	ldr	r2, [pc, #36]	; (8002a04 <HAL_RCC_ClockConfig+0x2ec>)
 80029e0:	5cd3      	ldrb	r3, [r2, r3]
 80029e2:	fa21 f303 	lsr.w	r3, r1, r3
 80029e6:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <HAL_RCC_ClockConfig+0x2f0>)
 80029e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_RCC_ClockConfig+0x2f4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe f91e 	bl	8000c30 <HAL_InitTick>
  
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3778      	adds	r7, #120	; 0x78
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	08003654 	.word	0x08003654
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	20000004 	.word	0x20000004

08002a10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b08b      	sub	sp, #44	; 0x2c
 8002a14:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a2a:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d002      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0x30>
 8002a3a:	2b08      	cmp	r3, #8
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x36>
 8002a3e:	e03c      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a40:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a42:	623b      	str	r3, [r7, #32]
      break;
 8002a44:	e03c      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a4c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a50:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	fa92 f2a2 	rbit	r2, r2
 8002a58:	607a      	str	r2, [r7, #4]
  return result;
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	fab2 f282 	clz	r2, r2
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	40d3      	lsrs	r3, r2
 8002a64:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a66:	5cd3      	ldrb	r3, [r2, r3]
 8002a68:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a6a:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	220f      	movs	r2, #15
 8002a74:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	fa92 f2a2 	rbit	r2, r2
 8002a7c:	60fa      	str	r2, [r7, #12]
  return result;
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	fab2 f282 	clz	r2, r2
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	40d3      	lsrs	r3, r2
 8002a88:	4a14      	ldr	r2, [pc, #80]	; (8002adc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a98:	4a0e      	ldr	r2, [pc, #56]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa8:	e004      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	623b      	str	r3, [r7, #32]
      break;
 8002ab8:	e002      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002abc:	623b      	str	r3, [r7, #32]
      break;
 8002abe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	372c      	adds	r7, #44	; 0x2c
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	007a1200 	.word	0x007a1200
 8002ad8:	0800366c 	.word	0x0800366c
 8002adc:	0800367c 	.word	0x0800367c
 8002ae0:	003d0900 	.word	0x003d0900

08002ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000000 	.word	0x20000000

08002afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b02:	f7ff ffef 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b06:	4601      	mov	r1, r0
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b10:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	fa92 f2a2 	rbit	r2, r2
 8002b1c:	603a      	str	r2, [r7, #0]
  return result;
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	fab2 f282 	clz	r2, r2
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	40d3      	lsrs	r3, r2
 8002b28:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b2a:	5cd3      	ldrb	r3, [r2, r3]
 8002b2c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	08003664 	.word	0x08003664

08002b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b46:	f7ff ffcd 	bl	8002ae4 <HAL_RCC_GetHCLKFreq>
 8002b4a:	4601      	mov	r1, r0
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b54:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	fa92 f2a2 	rbit	r2, r2
 8002b60:	603a      	str	r2, [r7, #0]
  return result;
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	fab2 f282 	clz	r2, r2
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	40d3      	lsrs	r3, r2
 8002b6c:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b6e:	5cd3      	ldrb	r3, [r2, r3]
 8002b70:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	08003664 	.word	0x08003664

08002b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b092      	sub	sp, #72	; 0x48
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80cd 	beq.w	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba8:	4b8e      	ldr	r3, [pc, #568]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10e      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb4:	4b8b      	ldr	r3, [pc, #556]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	4a8a      	ldr	r2, [pc, #552]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	61d3      	str	r3, [r2, #28]
 8002bc0:	4b88      	ldr	r3, [pc, #544]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd2:	4b85      	ldr	r3, [pc, #532]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d118      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bde:	4b82      	ldr	r3, [pc, #520]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a81      	ldr	r2, [pc, #516]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bea:	f7fe f865 	bl	8000cb8 <HAL_GetTick>
 8002bee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	e008      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf2:	f7fe f861 	bl	8000cb8 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b64      	cmp	r3, #100	; 0x64
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e0ea      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c04:	4b78      	ldr	r3, [pc, #480]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c10:	4b74      	ldr	r3, [pc, #464]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c18:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d07d      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d076      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c2e:	4b6d      	ldr	r3, [pc, #436]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c3c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b66      	ldr	r3, [pc, #408]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	461a      	mov	r2, r3
 8002c58:	2301      	movs	r3, #1
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c6c:	fab3 f383 	clz	r3, r3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	4b5d      	ldr	r3, [pc, #372]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c80:	4a58      	ldr	r2, [pc, #352]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c84:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d045      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe f812 	bl	8000cb8 <HAL_GetTick>
 8002c94:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c96:	e00a      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f7fe f80e 	bl	8000cb8 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e095      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	fa93 f3a3 	rbit	r3, r3
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cba:	2302      	movs	r3, #2
 8002cbc:	623b      	str	r3, [r7, #32]
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	61fb      	str	r3, [r7, #28]
  return result;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc8:	fab3 f383 	clz	r3, r3
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f043 0302 	orr.w	r3, r3, #2
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d102      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002cdc:	4b41      	ldr	r3, [pc, #260]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	e007      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	613a      	str	r2, [r7, #16]
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	fa92 f2a2 	rbit	r2, r2
 8002cfc:	60fa      	str	r2, [r7, #12]
  return result;
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	fab2 f282 	clz	r2, r2
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	f002 021f 	and.w	r2, r2, #31
 8002d10:	2101      	movs	r1, #1
 8002d12:	fa01 f202 	lsl.w	r2, r1, r2
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0bd      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d1c:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	492e      	ldr	r1, [pc, #184]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d105      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d36:	4b2b      	ldr	r3, [pc, #172]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	4a2a      	ldr	r2, [pc, #168]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d40:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d4e:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f023 0203 	bic.w	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	4922      	ldr	r1, [pc, #136]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	f023 0210 	bic.w	r2, r3, #16
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	491a      	ldr	r1, [pc, #104]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d8a:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	4913      	ldr	r1, [pc, #76]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002da8:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	490b      	ldr	r1, [pc, #44]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002dc6:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	4904      	ldr	r1, [pc, #16]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3748      	adds	r7, #72	; 0x48
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40007000 	.word	0x40007000
 8002dec:	10908100 	.word	0x10908100

08002df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e040      	b.n	8002e84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fd fddc 	bl	80009d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2224      	movs	r2, #36	; 0x24
 8002e1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f8c0 	bl	8002fb4 <UART_SetConfig>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e022      	b.n	8002e84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9ec 	bl	8003224 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fa73 	bl	8003368 <UART_CheckIdleState>
 8002e82:	4603      	mov	r3, r0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	f040 8082 	bne.w	8002faa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <HAL_UART_Transmit+0x26>
 8002eac:	88fb      	ldrh	r3, [r7, #6]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e07a      	b.n	8002fac <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_UART_Transmit+0x38>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e073      	b.n	8002fac <HAL_UART_Transmit+0x120>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2221      	movs	r2, #33	; 0x21
 8002ed8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eda:	f7fd feed 	bl	8000cb8 <HAL_GetTick>
 8002ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	88fa      	ldrh	r2, [r7, #6]
 8002ee4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	88fa      	ldrh	r2, [r7, #6]
 8002eec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef8:	d108      	bne.n	8002f0c <HAL_UART_Transmit+0x80>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d104      	bne.n	8002f0c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	e003      	b.n	8002f14 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f1c:	e02d      	b.n	8002f7a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2200      	movs	r2, #0
 8002f26:	2180      	movs	r1, #128	; 0x80
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fa66 	bl	80033fa <UART_WaitOnFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e039      	b.n	8002fac <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10b      	bne.n	8002f56 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	881a      	ldrh	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f4a:	b292      	uxth	r2, r2
 8002f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	3302      	adds	r3, #2
 8002f52:	61bb      	str	r3, [r7, #24]
 8002f54:	e008      	b.n	8002f68 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	781a      	ldrb	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	b292      	uxth	r2, r2
 8002f60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3301      	adds	r3, #1
 8002f66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1cb      	bne.n	8002f1e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2140      	movs	r1, #64	; 0x40
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fa32 	bl	80033fa <UART_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e005      	b.n	8002fac <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e000      	b.n	8002fac <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3720      	adds	r7, #32
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4b8b      	ldr	r3, [pc, #556]	; (800320c <UART_SetConfig+0x258>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	6979      	ldr	r1, [r7, #20]
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	430a      	orrs	r2, r1
 8003024:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a79      	ldr	r2, [pc, #484]	; (8003210 <UART_SetConfig+0x25c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d121      	bne.n	8003074 <UART_SetConfig+0xc0>
 8003030:	4b78      	ldr	r3, [pc, #480]	; (8003214 <UART_SetConfig+0x260>)
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b03      	cmp	r3, #3
 800303a:	d817      	bhi.n	800306c <UART_SetConfig+0xb8>
 800303c:	a201      	add	r2, pc, #4	; (adr r2, 8003044 <UART_SetConfig+0x90>)
 800303e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003042:	bf00      	nop
 8003044:	08003055 	.word	0x08003055
 8003048:	08003061 	.word	0x08003061
 800304c:	08003067 	.word	0x08003067
 8003050:	0800305b 	.word	0x0800305b
 8003054:	2300      	movs	r3, #0
 8003056:	77fb      	strb	r3, [r7, #31]
 8003058:	e01e      	b.n	8003098 <UART_SetConfig+0xe4>
 800305a:	2302      	movs	r3, #2
 800305c:	77fb      	strb	r3, [r7, #31]
 800305e:	e01b      	b.n	8003098 <UART_SetConfig+0xe4>
 8003060:	2304      	movs	r3, #4
 8003062:	77fb      	strb	r3, [r7, #31]
 8003064:	e018      	b.n	8003098 <UART_SetConfig+0xe4>
 8003066:	2308      	movs	r3, #8
 8003068:	77fb      	strb	r3, [r7, #31]
 800306a:	e015      	b.n	8003098 <UART_SetConfig+0xe4>
 800306c:	2310      	movs	r3, #16
 800306e:	77fb      	strb	r3, [r7, #31]
 8003070:	bf00      	nop
 8003072:	e011      	b.n	8003098 <UART_SetConfig+0xe4>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a67      	ldr	r2, [pc, #412]	; (8003218 <UART_SetConfig+0x264>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d102      	bne.n	8003084 <UART_SetConfig+0xd0>
 800307e:	2300      	movs	r3, #0
 8003080:	77fb      	strb	r3, [r7, #31]
 8003082:	e009      	b.n	8003098 <UART_SetConfig+0xe4>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a64      	ldr	r2, [pc, #400]	; (800321c <UART_SetConfig+0x268>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d102      	bne.n	8003094 <UART_SetConfig+0xe0>
 800308e:	2300      	movs	r3, #0
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e001      	b.n	8003098 <UART_SetConfig+0xe4>
 8003094:	2310      	movs	r3, #16
 8003096:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030a0:	d15c      	bne.n	800315c <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 80030a2:	7ffb      	ldrb	r3, [r7, #31]
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d828      	bhi.n	80030fa <UART_SetConfig+0x146>
 80030a8:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <UART_SetConfig+0xfc>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030d5 	.word	0x080030d5
 80030b4:	080030dd 	.word	0x080030dd
 80030b8:	080030e5 	.word	0x080030e5
 80030bc:	080030fb 	.word	0x080030fb
 80030c0:	080030eb 	.word	0x080030eb
 80030c4:	080030fb 	.word	0x080030fb
 80030c8:	080030fb 	.word	0x080030fb
 80030cc:	080030fb 	.word	0x080030fb
 80030d0:	080030f3 	.word	0x080030f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030d4:	f7ff fd12 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 80030d8:	61b8      	str	r0, [r7, #24]
        break;
 80030da:	e013      	b.n	8003104 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030dc:	f7ff fd30 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 80030e0:	61b8      	str	r0, [r7, #24]
        break;
 80030e2:	e00f      	b.n	8003104 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030e4:	4b4e      	ldr	r3, [pc, #312]	; (8003220 <UART_SetConfig+0x26c>)
 80030e6:	61bb      	str	r3, [r7, #24]
        break;
 80030e8:	e00c      	b.n	8003104 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ea:	f7ff fc91 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 80030ee:	61b8      	str	r0, [r7, #24]
        break;
 80030f0:	e008      	b.n	8003104 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030f6:	61bb      	str	r3, [r7, #24]
        break;
 80030f8:	e004      	b.n	8003104 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	77bb      	strb	r3, [r7, #30]
        break;
 8003102:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d074      	beq.n	80031f4 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	005a      	lsls	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	085b      	lsrs	r3, r3, #1
 8003114:	441a      	add	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	b29b      	uxth	r3, r3
 8003120:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b0f      	cmp	r3, #15
 8003126:	d916      	bls.n	8003156 <UART_SetConfig+0x1a2>
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312e:	d212      	bcs.n	8003156 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	b29b      	uxth	r3, r3
 8003134:	f023 030f 	bic.w	r3, r3, #15
 8003138:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	085b      	lsrs	r3, r3, #1
 800313e:	b29b      	uxth	r3, r3
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	b29a      	uxth	r2, r3
 8003146:	89fb      	ldrh	r3, [r7, #14]
 8003148:	4313      	orrs	r3, r2
 800314a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	89fa      	ldrh	r2, [r7, #14]
 8003152:	60da      	str	r2, [r3, #12]
 8003154:	e04e      	b.n	80031f4 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	77bb      	strb	r3, [r7, #30]
 800315a:	e04b      	b.n	80031f4 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 800315c:	7ffb      	ldrb	r3, [r7, #31]
 800315e:	2b08      	cmp	r3, #8
 8003160:	d827      	bhi.n	80031b2 <UART_SetConfig+0x1fe>
 8003162:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <UART_SetConfig+0x1b4>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	0800318d 	.word	0x0800318d
 800316c:	08003195 	.word	0x08003195
 8003170:	0800319d 	.word	0x0800319d
 8003174:	080031b3 	.word	0x080031b3
 8003178:	080031a3 	.word	0x080031a3
 800317c:	080031b3 	.word	0x080031b3
 8003180:	080031b3 	.word	0x080031b3
 8003184:	080031b3 	.word	0x080031b3
 8003188:	080031ab 	.word	0x080031ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800318c:	f7ff fcb6 	bl	8002afc <HAL_RCC_GetPCLK1Freq>
 8003190:	61b8      	str	r0, [r7, #24]
        break;
 8003192:	e013      	b.n	80031bc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003194:	f7ff fcd4 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 8003198:	61b8      	str	r0, [r7, #24]
        break;
 800319a:	e00f      	b.n	80031bc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800319c:	4b20      	ldr	r3, [pc, #128]	; (8003220 <UART_SetConfig+0x26c>)
 800319e:	61bb      	str	r3, [r7, #24]
        break;
 80031a0:	e00c      	b.n	80031bc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a2:	f7ff fc35 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 80031a6:	61b8      	str	r0, [r7, #24]
        break;
 80031a8:	e008      	b.n	80031bc <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ae:	61bb      	str	r3, [r7, #24]
        break;
 80031b0:	e004      	b.n	80031bc <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	77bb      	strb	r3, [r7, #30]
        break;
 80031ba:	bf00      	nop
    }

    if (pclk != 0U)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d018      	beq.n	80031f4 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	085a      	lsrs	r2, r3, #1
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	441a      	add	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	2b0f      	cmp	r3, #15
 80031dc:	d908      	bls.n	80031f0 <UART_SetConfig+0x23c>
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e4:	d204      	bcs.n	80031f0 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	e001      	b.n	80031f4 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003200:	7fbb      	ldrb	r3, [r7, #30]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3720      	adds	r7, #32
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	efff69f3 	.word	0xefff69f3
 8003210:	40013800 	.word	0x40013800
 8003214:	40021000 	.word	0x40021000
 8003218:	40004400 	.word	0x40004400
 800321c:	40004800 	.word	0x40004800
 8003220:	007a1200 	.word	0x007a1200

08003224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01a      	beq.n	800333a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003322:	d10a      	bne.n	800333a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	605a      	str	r2, [r3, #4]
  }
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af02      	add	r7, sp, #8
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003378:	f7fd fc9e 	bl	8000cb8 <HAL_GetTick>
 800337c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b08      	cmp	r3, #8
 800338a:	d10e      	bne.n	80033aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800338c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f82d 	bl	80033fa <UART_WaitOnFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e023      	b.n	80033f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d10e      	bne.n	80033d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f817 	bl	80033fa <UART_WaitOnFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e00d      	b.n	80033f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	4613      	mov	r3, r2
 8003408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800340a:	e05e      	b.n	80034ca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d05a      	beq.n	80034ca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003414:	f7fd fc50 	bl	8000cb8 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	429a      	cmp	r2, r3
 8003422:	d302      	bcc.n	800342a <UART_WaitOnFlagUntilTimeout+0x30>
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d11b      	bne.n	8003462 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003438:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2220      	movs	r2, #32
 800344e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e043      	b.n	80034ea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d02c      	beq.n	80034ca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800347a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800347e:	d124      	bne.n	80034ca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003488:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003498:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2220      	movs	r2, #32
 80034ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e00f      	b.n	80034ea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69da      	ldr	r2, [r3, #28]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4013      	ands	r3, r2
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	bf0c      	ite	eq
 80034da:	2301      	moveq	r3, #1
 80034dc:	2300      	movne	r3, #0
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d091      	beq.n	800340c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <__libc_init_array>:
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	4e0d      	ldr	r6, [pc, #52]	; (800352c <__libc_init_array+0x38>)
 80034f8:	4c0d      	ldr	r4, [pc, #52]	; (8003530 <__libc_init_array+0x3c>)
 80034fa:	1ba4      	subs	r4, r4, r6
 80034fc:	10a4      	asrs	r4, r4, #2
 80034fe:	2500      	movs	r5, #0
 8003500:	42a5      	cmp	r5, r4
 8003502:	d109      	bne.n	8003518 <__libc_init_array+0x24>
 8003504:	4e0b      	ldr	r6, [pc, #44]	; (8003534 <__libc_init_array+0x40>)
 8003506:	4c0c      	ldr	r4, [pc, #48]	; (8003538 <__libc_init_array+0x44>)
 8003508:	f000 f820 	bl	800354c <_init>
 800350c:	1ba4      	subs	r4, r4, r6
 800350e:	10a4      	asrs	r4, r4, #2
 8003510:	2500      	movs	r5, #0
 8003512:	42a5      	cmp	r5, r4
 8003514:	d105      	bne.n	8003522 <__libc_init_array+0x2e>
 8003516:	bd70      	pop	{r4, r5, r6, pc}
 8003518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800351c:	4798      	blx	r3
 800351e:	3501      	adds	r5, #1
 8003520:	e7ee      	b.n	8003500 <__libc_init_array+0xc>
 8003522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003526:	4798      	blx	r3
 8003528:	3501      	adds	r5, #1
 800352a:	e7f2      	b.n	8003512 <__libc_init_array+0x1e>
 800352c:	0800368c 	.word	0x0800368c
 8003530:	0800368c 	.word	0x0800368c
 8003534:	0800368c 	.word	0x0800368c
 8003538:	08003690 	.word	0x08003690

0800353c <memset>:
 800353c:	4402      	add	r2, r0
 800353e:	4603      	mov	r3, r0
 8003540:	4293      	cmp	r3, r2
 8003542:	d100      	bne.n	8003546 <memset+0xa>
 8003544:	4770      	bx	lr
 8003546:	f803 1b01 	strb.w	r1, [r3], #1
 800354a:	e7f9      	b.n	8003540 <memset+0x4>

0800354c <_init>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	bf00      	nop
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr

08003558 <_fini>:
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355a:	bf00      	nop
 800355c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355e:	bc08      	pop	{r3}
 8003560:	469e      	mov	lr, r3
 8003562:	4770      	bx	lr
